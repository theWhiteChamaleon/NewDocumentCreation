{"version":3,"file":"static/js/718.36c44f94.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/List/List.jsx","components/Card/Card.jsx","components/DragAndDrop/DragAndDropStandAlone.jsx","components/Card/cardwithdraganddrop.jsx","components/Loader/Loader.js","components/SearchInput/SearchInput.jsx","components/Table/DraggableColumnHeader.jsx","components/Table/DraggableCellComponent.jsx","components/Table/Table.jsx","hooks/useBOSWidget.js","hooks/useBOSDropableArea.js","hooks/useDroppableArea.js","hooks/useInterComSearch.js","services/api/PlantAssignment/plantChildrenService.js","services/api/PlantAssignment/getRouteDetails.js","hooks/usePlantAssignment.js","services/api/PlantAssignment/userGroupService.js","services/api/PlantAssignment/assignedPlantService.js","services/api/PlantAssignment/CADetailService.js","hooks/usePlantDropableArea.js","hooks/useRevisions.js","hooks/useToast.js","services/api/PlantAssignment/allPlantSevice.js","services/api/PlantAssignment/fetchCsrfService.js","services/api/refreshService.js"],"sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CustomButton = ({\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  type = \"button\",\r\n  disabled = false,\r\n  onClick,\r\n  className = \"\",\r\n  title,\r\n  text,\r\n  imageSrc,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Button\r\n      variant={variant}\r\n      size={size}\r\n      type={type}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      className={className}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {imageSrc && (\r\n        <img\r\n          src={imageSrc}\r\n          alt={text}\r\n          style={{ width: \"20px\", height: \"20px\", marginRight: \"5px\" }}\r\n        />\r\n      )}{\" \"}\r\n      {/* Render image if provided */}\r\n      {text}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  variant: PropTypes.string,\r\n  size: PropTypes.oneOf([\"sm\", \"md\", \"lg\"]),\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string,\r\n  text: PropTypes.string,\r\n  imageSrc: PropTypes.string, // PropType for image source\r\n};\r\n\r\nexport default CustomButton;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./List.css\";\r\nimport { makeDraggable } from \"../../utils/helpers\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst List = ({ data, isColumn, onDragStart, onDragEnd,widgetType }) => {\r\n  const titleRef = useRef(null);\r\n  const initialDraggedData = useSelector(\r\n    (state) => state.droppedObject.droppedObjectData.initialDraggedData\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (titleRef.current && initialDraggedData) {\r\n      makeDraggable(\r\n        titleRef.current,\r\n        initialDraggedData,\r\n        onDragStart,\r\n        onDragEnd\r\n      );\r\n    }\r\n  }, [data, initialDraggedData, onDragStart, onDragEnd]);\r\n\r\n  if (!data) return null;\r\n\r\n  return (\r\n    <div className={`d-flex ${isColumn ? \"flex-column\" : \"flex-row\"}`}>\r\n      <h5\r\n        ref={titleRef}\r\n        className={`mb-1 text-start title ${!isColumn ? \"me-2\" : \"\"}`}\r\n      >\r\n        {data.title}\r\n        {/* {widgetType === \"documentCreationWidget\"?(data.EIN?data.EIN:data.title) : data.title} */}\r\n      </h5>\r\n      <ul\r\n        className={`list-group d-flex flex-row flex-sm-row flex-wrap justify-content-between pb-3 pb-md-0 ${\r\n          !isColumn ? \"w-75\" : \"\"\r\n        }`}\r\n      >\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ps-0 pb-0 ${\r\n            !isColumn ? \"d-flex flex-row justify-content-around\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p>\r\n            <b>Type:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.type}>\r\n              {data.type}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            <b>Owner:</b>{\" \"}\r\n            <span className=\"list-text\" title={data.owner}>\r\n              {data.owner}\r\n            </span>\r\n          </p>\r\n          {isColumn && (\r\n            <p>\r\n              <b>Maturity State:</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Maturity State\"]}>\r\n                {data[\"Maturity State\"]}\r\n              </span>\r\n            </p>\r\n          )}\r\n        </li>\r\n        {isColumn && (\r\n          <li\r\n            className=\"list-group-item flex-grow-1 text-start mx-0 pt-0\"\r\n            style={{ border: \"0\", paddingLeft: \"0\" }}\r\n          >\r\n            <p>\r\n              <b>Dropped Revision :</b>{\" \"}\r\n              <span className=\"list-text\" title={data[\"Dropped Revision\"]}>\r\n                {data[\"Dropped Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Latest Released Revision:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Latest Released Revision\"]}\r\n              >\r\n                {data[\"Latest Released Revision\"]}\r\n              </span>\r\n            </p>\r\n            <p>\r\n              <b>Collabspace:</b>{\" \"}\r\n              <span\r\n                className=\"list-text\"\r\n                title={data[\"Collaborative Space Title\"]}\r\n              >\r\n                {data[\"Collaborative Space Title\"]}\r\n              </span>\r\n            </p>\r\n          </li>\r\n        )}\r\n\r\n        <li\r\n          className={`list-group-item flex-grow-1 text-start mx-0 ${\r\n            !isColumn ? \"d-flex flex-row\" : \"\"\r\n          }`}\r\n          style={{ border: \"0\", paddingLeft: \"0\" }}\r\n        >\r\n          {data.type !== \"Document\" && (\r\n            <>\r\n              <p>\r\n                <b>CAD Format:</b>{\" \"}\r\n                <span className=\"list-text\" title={data[\"CAD Format\"]}>\r\n                  {data[\"CAD Format\"]}\r\n                </span>\r\n              </p>\r\n              <p>\r\n                <b>EIN:</b>{\" \"}\r\n                <span className=\"list-text\" title={data.EIN}>\r\n                  {data.EIN}\r\n                </span>\r\n              </p>\r\n            </>\r\n          )}\r\n        </li>\r\n\r\n        <div className=\"d-none d-md-flex align-items-stretch\">\r\n          <div className=\"vr\"></div>\r\n        </div>\r\n\r\n        {/* Horizontal divider after third li on small screens */}\r\n        <div className=\"d-flex d-md-none w-100\">\r\n          <hr className=\"w-100\" />\r\n        </div>\r\n\r\n        <li\r\n          className=\"list-group-item flex-grow-1 text-start mx-0\"\r\n          style={{ border: \"0\" }}\r\n        >\r\n          <p className=\"description-container\" title={data.Description}>\r\n            {data.Description}\r\n          </p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport { Image, Card, CardBody } from \"react-bootstrap\";\r\nimport List from \"../List/List\";\r\n\r\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n// import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst CardComponent = ({ data, onDragStart, onDragEnd, widgetType }) => {\r\n  const [isColumn, setIsColumn] = useState(true);\r\n\r\n  const toggleFlexDirection = () => {\r\n    setIsColumn(!isColumn);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"d-flex flex-row mt-4 border-0 \" style={{ width: \"100%\" }}>\r\n      <div className=\"pb-3 d-none d-md-block me-5 ms-4\">\r\n        <Card.Img\r\n          className={`${\r\n            !isColumn ? \"image-resize img-thumbnail\" : \"img-thumbnail\"\r\n          } `}\r\n          src={data.imageURL} // Use dynamic image URL from data\r\n          alt=\"Card image\"\r\n        />\r\n      </div>\r\n      <CardBody className={`${!isColumn ? \"p-0 layout-change\" : \"p-0\"} `}>\r\n        <List\r\n          data={data}\r\n          isColumn={isColumn}\r\n          onDragStart={onDragStart}\r\n          onDragEnd={onDragEnd}\r\n          widgetType={widgetType}\r\n        />\r\n      </CardBody>\r\n      <button\r\n        className=\"me-2 p-0 btn btn-link accordion-toggle\"\r\n        onClick={toggleFlexDirection}\r\n      >\r\n        {/* <FontAwesomeIcon\r\n          icon={faAngleUp}\r\n          size=\"xs\"\r\n          style={{ color: \"#212121\" }}\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        /> */}\r\n\r\n        <Image\r\n          src=\"https://khanfarzan17.github.io/tedting-revision-float/images/arrow.png\"\r\n          alt=\"downArrow\"\r\n          className={`rotatable ${isColumn ? \"rotated\" : \"\"}`}\r\n        />\r\n      </button>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default CardComponent;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport \"./DragAndDrop.css\"; // Import styles for the component\r\nimport { Image } from \"react-bootstrap\";\r\nimport useDroppableArea from \"../../hooks/useDroppableArea\";\r\nimport usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\nimport useBOSDropableArea from \"../../hooks/useBOSDropableArea\";\r\n// import usePlantDropableArea from \"../../hooks/usePlantDropableArea\";\r\n\r\nconst DragAndDropStandAlone = ({ widgetType }) => {\r\n  const plantDroppable = usePlantDropableArea();\r\n  const bosDropable = useBOSDropableArea();\r\n  const defaultDroppable = useDroppableArea(widgetType);\r\n\r\n  const { initializeDroppableArea } =\r\n    widgetType === \"PlantAssignment\"\r\n      ? plantDroppable\r\n      : widgetType === \"bosWidget\"\r\n      ? bosDropable\r\n      : defaultDroppable;\r\n  const hasInitializedDroppable = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (!hasInitializedDroppable.current) {\r\n      // console.log(\"[DragAndDrop] 🔄 Initializing droppable area...\");\r\n      initializeDroppableArea();\r\n      hasInitializedDroppable.current = true; // ✅ Prevent multiple calls\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"droppable-container mt-4\">\r\n        <Image\r\n          style={{ width: \"90px\", height: \"90px\" }}\r\n          src=\"https://thewhitechamaleon.github.io/testrapp/images/drag.png\"\r\n          alt=\"Data Collect\"\r\n          className=\"search-icon\"\r\n        />\r\n        <span className=\"drag-and-drop-text\">Drag and Drop</span>\r\n        <div className=\"divider-container\">\r\n          <hr className=\"divider\" />\r\n          <span className=\"divider-text\">or</span>\r\n          <hr className=\"divider\" />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DragAndDropStandAlone;\r\n","import React, { useState } from \"react\";\r\nimport DragAndDropStandAlone from \"../DragAndDrop/DragAndDropStandAlone\";\r\nimport CardComponent from \"./Card\";\r\n\r\nconst CardWithDragAndDrop = ({ data, widgetType }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const handleDragStart = () => {\r\n    // console.log(\"handleDragStart called\");\r\n    setIsDragging(true);\r\n  };\r\n\r\n  const handleDragEnd = () => {\r\n    // console.log(\"handleDragEnd called\");\r\n    // console.log(\"Before setIsDragging(false) - isDragging:\", isDragging);\r\n    setIsDragging(false);\r\n    // console.log(\"After setIsDragging(false) - isDragging:\", isDragging);\r\n  };\r\n  return (\r\n    <div className={`card-with-drag-and-drop ${isDragging ? \"dragging\" : \"\"}`}>\r\n      <DragAndDropStandAlone widgetType={widgetType} />\r\n      <CardComponent\r\n        data={data}\r\n        widgetType={widgetType}\r\n        onDragStart={handleDragStart}\r\n        onDragEnd={handleDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardWithDragAndDrop;\r\n","import React from \"react\";\r\nimport \"./Loader.css\"; // Create a CSS file for custom styles\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader-container\">\r\n      <div className=\"loader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, InputGroup, Button } from \"react-bootstrap\";\r\nimport \"./SearchInput.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMagnifyingGlass } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst SearchInput = ({ onSearch, disabled }) => {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const inputRef = useRef(null);\r\n\r\n  const handleInputChange = (event) => {\r\n    const newSearchText = event.target.value;\r\n    setSearchText(newSearchText);\r\n  };\r\n\r\n  const handleInputKeyPress = (event) => {\r\n    if (event.key === \"Enter\" && searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setSearchText(\"\");\r\n    inputRef.current.focus(); // Keep focus on the input after clearing\r\n  };\r\n  const handleSearchIconClick = () => {\r\n    if (searchText.trim()) {\r\n      onSearch(searchText);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"search-content-container d-flex align-items-center\">\r\n      <FontAwesomeIcon\r\n        icon={faMagnifyingGlass}\r\n        onClick={handleSearchIconClick}\r\n        className=\"search-icon\"\r\n      />\r\n\r\n      <span className=\"ms-4 drag-and-drop-text flex-grow-1\">\r\n        <InputGroup>\r\n          <Form.Control\r\n            type=\"text\"\r\n            ref={inputRef}\r\n            value={searchText}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleInputKeyPress}\r\n            placeholder=\"Search...\"\r\n            disabled={disabled}\r\n          />\r\n          {searchText && (\r\n            <Button\r\n              variant=\"btn-link\"\r\n              onClick={handleClearClick}\r\n              className=\"clear-button\"\r\n            >\r\n              ✖\r\n            </Button>\r\n          )}\r\n        </InputGroup>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableColumnHeader = ({ header, columns, table }) => {\r\n  const isFixed = header.column.id === \"selection\";\r\n  const isPinned = table\r\n    .getState()\r\n    .columnPinning.left.includes(header.column.id);\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const sortable = useSortable({\r\n    id: header.column.id,\r\n    disabled: header.column.id === \"selection\" || header.column.id === \"EIN\",\r\n  });\r\n\r\n  const { attributes, listeners, setNodeRef, transform, isDragging } = isFixed\r\n    ? {\r\n        attributes: {},\r\n        listeners: {},\r\n        setNodeRef: null,\r\n        transform: null,\r\n        isDragging: false,\r\n      }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: \"sticky\",\r\n    top: 0,\r\n    left: isFixed ? 0 : isPinned ? \"var(--pinned-left)\" : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: header.getSize(),\r\n    zIndex: isFixed ? 5 : isPinned ? 4 : 3,\r\n    cursor: isFixed ? \"default\" : \"move\",\r\n    backgroundColor: \"#f2f2f2\",\r\n  };\r\n\r\n  return (\r\n    <th\r\n      ref={setNodeRef}\r\n      style={style}\r\n      data-fixed={isFixed}\r\n      data-pinned={isPinned}\r\n      className={className}\r\n    >\r\n      <div\r\n        className=\"d-flex align-items-center header-content\"\r\n        {...(!isFixed ? { ...attributes, ...listeners } : {})}\r\n      >\r\n        <div\r\n          className=\"flex-grow-1\"\r\n          onClick={header.column.getToggleSortingHandler()}\r\n        >\r\n          {header.isPlaceholder\r\n            ? null\r\n            : flexRender(header.column.columnDef.header, header.getContext())}\r\n          {header.column.getIsSorted() === \"asc\" ? (\r\n            <span className=\"icon\">↑</span>\r\n          ) : header.column.getIsSorted() === \"desc\" ? (\r\n            <span className=\"icon\">↓</span>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <div\r\n        {...{\r\n          onDoubleClick: () => header.column.resetSize(),\r\n          onMouseDown: header.getResizeHandler(),\r\n          onTouchStart: header.getResizeHandler(),\r\n          className: `Resizer ${\r\n            header.column.getIsResizing() ? \"isResizing\" : \"\"\r\n          }`,\r\n        }}\r\n      />\r\n    </th>\r\n  );\r\n};\r\n\r\nexport default DraggableColumnHeader;\r\n","import React from \"react\";\r\nimport { useSortable } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport { flexRender } from \"@tanstack/react-table\";\r\n\r\nconst DraggableCell = ({ cell, columns, changedCells }) => {\r\n  const isFixed = cell.column.id === \"selection\";\r\n  const isPinned = cell.column.getIsPinned();\r\n  const className = isFixed ? \"is-fixed\" : isPinned ? \"is-pinned\" : \"\";\r\n  const cellContent = flexRender(cell.column.columnDef.cell, cell.getContext());\r\n  // Extract only the column name (remove row index prefix like '0_')\r\n  const columnName =\r\n    cell.column.id.split(\"_\").slice(1).join(\"_\") || cell.column.id;\r\n  const isChanged = changedCells?.[columnName];\r\n  const sortable = useSortable({\r\n    id: cell.column.id,\r\n    disabled: isFixed,\r\n  });\r\n\r\n  const { setNodeRef, transform, isDragging } = isFixed\r\n    ? { setNodeRef: null, transform: null, isDragging: false }\r\n    : sortable;\r\n\r\n  const style = {\r\n    opacity: isDragging ? 0.8 : 1,\r\n    position: isFixed || isPinned ? \"sticky\" : \"relative\",\r\n    left: isFixed ? 0 : \"auto\",\r\n    transform: CSS.Transform.toString(transform),\r\n    transition: \"width transform 0.2s ease-in-out\",\r\n    width: cell.column.getSize(),\r\n    zIndex: isFixed ? 2 : isDragging ? 1 : isPinned ? 2 : 0,\r\n  };\r\n\r\n  return (\r\n    <td\r\n      ref={setNodeRef}\r\n      style={style}\r\n      className={className}\r\n      title={isFixed ? \"\" : `${cell.getValue()}`}\r\n    >\r\n      {isFixed ? (\r\n        cellContent\r\n      ) : (\r\n        <div\r\n          className=\"cell-content\"\r\n          style={{\r\n            color: isChanged ? \"red\" : \"inherit\",\r\n            fontWeight: isChanged ? \"bold\" : \"normal\",\r\n          }}\r\n        >\r\n          {cellContent}\r\n          <style>\r\n            {`\r\n        .cell-content select {\r\n          color: ${isChanged ? \"red\" : \"inherit\"} !important;\r\n          font-weight: ${isChanged ? \"bold\" : \"normal\"} !important;\r\n        }\r\n      `}\r\n          </style>\r\n        </div>\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nexport default DraggableCell;\r\n","import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useReactTable,\r\n  getCoreRowModel,\r\n  getSortedRowModel,\r\n} from \"@tanstack/react-table\";\r\nimport {\r\n  DndContext,\r\n  KeyboardSensor,\r\n  MouseSensor,\r\n  TouchSensor,\r\n  closestCenter,\r\n  useSensor,\r\n  useSensors,\r\n} from \"@dnd-kit/core\";\r\nimport { restrictToHorizontalAxis } from \"@dnd-kit/modifiers\";\r\nimport {\r\n  arrayMove,\r\n  SortableContext,\r\n  horizontalListSortingStrategy,\r\n} from \"@dnd-kit/sortable\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./Table.css\";\r\nimport CustomButton from \"../Button/Button\";\r\nimport { setSelectedTableRows } from \"../../store/droppedObjectSlice\";\r\nimport { handleExportExcel } from \"../../utils/helpers\";\r\nimport { getRowRange } from \"../../utils/helpers\";\r\nimport DraggableColumnHeader from \"./DraggableColumnHeader\";\r\nimport DraggableCell from \"./DraggableCellComponent\";\r\n\r\n// Add this utility  function to get the storage key based on the widget type\r\nconst getWidgetStorageKey = (widgetType) => {\r\n  console.log(\"Widget Type:\", widgetType);\r\n  if (!widgetType) {\r\n    console.warn(\"Widget type is missing, using default key\");\r\n    return \"tableColumnOrder_default\";\r\n  }\r\n  return `tableColumnOrder_${widgetType}`;\r\n};\r\n\r\nconst ReusableTable = ({\r\n  columns,\r\n  data,\r\n  editable = false,\r\n  meta,\r\n  type,\r\n  widgetType,\r\n  latestRevision,\r\n  droppedRevision,\r\n  onSelectableRowsChange,\r\n  showActionButtons = true,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const [tableData, setTableData] = useState(data);\r\n  const [rowSelection, setRowSelection] = useState({});\r\n  const [lastSelectedId, setLastSelectedId] = useState(null); // Track last clicked row\r\n  const tableRef = useRef(null);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n    \r\n  useEffect(() => {\r\n    const handleScroll = (e) => {\r\n      setIsScrolled(e.target.scrollTop > 0);\r\n    };\r\n\r\n    const tableContainer = tableRef.current;\r\n    if (tableContainer) {\r\n      tableContainer.addEventListener(\"scroll\", handleScroll);\r\n    }\r\n\r\n    return () => {\r\n      if (tableContainer) {\r\n        tableContainer.removeEventListener(\"scroll\", handleScroll);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (widgetType !== \"Revision_FLoat_Widget\" && widgetType !== \"Doc_Creation_Widget\" && widgetType !== \"Plant_Assignment_Widget\") {\r\n    var { updateTableData } = meta; // Need to work on this\r\n  }\r\n\r\n  // Modified columnOrder initialization\r\n  const [columnOrder, setColumnOrder] = useState(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    const storedOrder = localStorage.getItem(storageKey);\r\n\r\n    if (storedOrder) {\r\n      try {\r\n        const parsed = JSON.parse(storedOrder);\r\n        // Validate stored columns match current columns\r\n        const isValid = parsed.every(\r\n          (colId) =>\r\n            colId === \"selection\" ||\r\n            columns.some((col) => (col.id || col.accessorKey) === colId)\r\n        );\r\n        if (isValid) return parsed;\r\n      } catch (error) {\r\n        console.error(`Failed to parse column order for ${widgetType}:`, error);\r\n      }\r\n    }\r\n\r\n    // Default order if nothing in localStorage or invalid data\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  });\r\n\r\n  // Update localStorage with widget-specific key\r\n  useEffect(() => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.setItem(storageKey, JSON.stringify(columnOrder));\r\n  }, [columnOrder, widgetType]);\r\n\r\n  console.log(\"Column Order:\", columnOrder);\r\n\r\n  // Store default column order for reset functionality\r\n  const defaultColumnOrder = useMemo(() => {\r\n    const initialOrder = [\"selection\"];\r\n    const otherColumns = columns.map((col) => col.id || col.accessorKey);\r\n    initialOrder.push(...otherColumns);\r\n    return initialOrder;\r\n  }, [columns]);\r\n\r\n  // Modified reset columns handler\r\n  const handleResetColumns = () => {\r\n    const storageKey = getWidgetStorageKey(widgetType);\r\n    localStorage.removeItem(storageKey);\r\n    setColumnOrder(defaultColumnOrder);\r\n    // console.log(\"Reset columns clicked\", defaultColumnOrder);\r\n  };\r\n\r\n  const handleEditCell = (rowIndex, columnId, value) => {\r\n    const updatedData = tableData.map((row, index) =>\r\n      index === rowIndex ? { ...row, [columnId]: value } : row\r\n    );\r\n    console.log(\"[Table] Updated Table Data:\", updatedData);\r\n\r\n    // Call the meta function to update external data if needed\r\n    if (meta?.updateTableData) {\r\n      meta.updateTableData(updatedData);\r\n    }\r\n    setTableData(updatedData);\r\n  };\r\n\r\n  // Initialize columnPinning based on column definitions\r\n  const initialColumnPinning = useMemo(() => {\r\n    const pinnedColumns = { left: [\"selection\", \"EIN \"] };\r\n    columns.forEach((column) => {\r\n      if (column.columnPinning) {\r\n        pinnedColumns.left.push(column.id || column.accessorKey);\r\n      }\r\n    });\r\n    return pinnedColumns;\r\n  }, [columns]);\r\n\r\n  // Enhance columns for editable functionality and add checkbox selection\r\n  const enhancedColumns = useMemo(() => {\r\n    const selectionColumn = {\r\n      id: \"selection\",\r\n      header: ({ table }) => (\r\n        <input\r\n          type=\"checkbox\"\r\n          ref={(el) => {\r\n            if (el) {\r\n              el.indeterminate = table.getIsSomeRowsSelected();\r\n            }\r\n          }}\r\n          checked={table.getIsAllRowsSelected()}\r\n          onChange={table.getToggleAllRowsSelectedHandler()}\r\n        />\r\n      ),\r\n      cell: ({ row }) => {\r\n        const isSelectable = enableRowSelection(row.original); // Get row's selectability status\r\n\r\n        return (\r\n          <input\r\n            type=\"checkbox\"\r\n            disabled={!isSelectable} // Disable non-selectable rows\r\n            style={{\r\n              cursor: isSelectable ? \"pointer\" : \"not-allowed\", // Block cursor for non-selectable rows\r\n              opacity: isSelectable ? 1 : 0.5, // Make disabled checkboxes faded\r\n            }}\r\n            {...{\r\n              checked: row.getIsSelected(),\r\n              onChange: row.getToggleSelectedHandler(),\r\n            }}\r\n          />\r\n        );\r\n      },\r\n    };\r\n\r\n    const baseColumns = editable\r\n      ? columns.map((column) => ({\r\n          ...column,\r\n          cell: column.editable\r\n            ? ({ row, getValue }) => (\r\n                <input\r\n                  className=\"input-cell\"\r\n                  value={getValue()}\r\n                  onChange={(e) =>\r\n                    handleEditCell(\r\n                      row.index,\r\n                      column.accessorKey,\r\n                      e.target.value\r\n                    )\r\n                  }\r\n                />\r\n              )\r\n            : column.cell,\r\n        }))\r\n      : columns;\r\n\r\n    // return [selectionColumn, ...baseColumns];\r\n    return showActionButtons ? [selectionColumn, ...baseColumns] : baseColumns;\r\n  }, [columns, editable]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(MouseSensor, {\r\n      activationConstraint: {\r\n        distance: 8,\r\n      },\r\n    }),\r\n    useSensor(TouchSensor, {\r\n      activationConstraint: {\r\n        delay: 200,\r\n        tolerance: 5,\r\n      },\r\n    }),\r\n    useSensor(KeyboardSensor, {})\r\n  );\r\n\r\n  // Jatin added this for testing, if needs to change and make it work in the parent component, then will change this.\r\n  useEffect(() => {\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      const selectableRows = tableData.filter(enableRowSelection);\r\n      onSelectableRowsChange(selectableRows); // Notify parent\r\n    }\r\n  }, [widgetType, tableData, onSelectableRowsChange]);\r\n\r\n  // Modified handleDragEnd to save to localStorage\r\n  const handleDragEnd = (event) => {\r\n    const { active, over } = event;\r\n\r\n    if (active && over && active.id !== over.id) {\r\n      if (active.id !== \"selection\" && active.id !== \"EIN\") {\r\n        setColumnOrder((prevOrder) => {\r\n          const oldIndex = prevOrder.indexOf(active.id);\r\n          const newIndex = prevOrder.indexOf(over.id);\r\n          const newOrder = arrayMove(prevOrder, oldIndex, newIndex);\r\n          return newOrder;\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const enableRowSelection = (row) => {\r\n    if (widgetType === \"Bos_Attribute_Widget\" && widgetType === \"Doc_Creation_Widget\" && type === \"Document\") {\r\n      return row.IsLatest === \"TRUE\";\r\n    }\r\n    if (widgetType === \"Bos_Attribute_Widget\") {\r\n      return !latestRevision || latestRevision === droppedRevision;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const table = useReactTable({\r\n    data: tableData,\r\n    columns: enhancedColumns,\r\n    state: {\r\n      rowSelection,\r\n      columnOrder,\r\n      columnPinning: initialColumnPinning,\r\n    },\r\n    onRowSelectionChange: setRowSelection,\r\n    onColumnOrderChange: setColumnOrder,\r\n    getCoreRowModel: getCoreRowModel(),\r\n    getSortedRowModel: getSortedRowModel(),\r\n\r\n    // Earlier it was\r\n    //  enableRowSelection: true,\r\n\r\n    enableRowSelection: (row) => enableRowSelection(row.original),\r\n\r\n    defaultColumn: {\r\n      size: 170,\r\n      minSize: 50,\r\n      maxSize: 500,\r\n    },\r\n    columnResizeMode: \"onChange\",\r\n    meta: {\r\n      updateTableData, // Added this to the meta field to allow columns to update the table data\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Get selected row data using table.getSelectedRowModel()\r\n    const selectedRows = table\r\n      .getSelectedRowModel()\r\n      .flatRows.map((row) => row.original);\r\n    // console.log(\"Selected Rows (TanStack Table):\", selectedRows);\r\n    dispatch(setSelectedTableRows(selectedRows)); // Update Redux store\r\n  }, [rowSelection, dispatch]); // Update when rowSelection changes\r\n\r\n  const columnSizeVars = useMemo(() => {\r\n    const headers = table.getFlatHeaders();\r\n    const colSizes = {};\r\n    console.log(\"table.getTotalSize()\", table.getTotalSize());\r\n    for (let i = 0; i < headers.length; i++) {\r\n      const header = headers[i];\r\n      colSizes[`--header-${header.id}-size`] = header.getSize();\r\n      colSizes[`--col-${header.column.id}-size`] = header.column.getSize();\r\n    }\r\n    return colSizes;\r\n  }, [table.getState().columnSizingInfo, table.getState().columnSizing]);\r\n\r\n  const handleSelectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: true },\r\n    });\r\n  };\r\n\r\n  const handleDeselectAll = () => {\r\n    table.getToggleAllRowsSelectedHandler()({\r\n      target: { checked: false },\r\n    });\r\n  };\r\n\r\n  const handleExport = () => {\r\n    console.log(\"Export button clicked\");\r\n    console.log(\"Widget Type in handleExport:\", widgetType); // ADD THIS LINE\r\n    if (widgetType === \"Revision_FLoat_Widget\") {\r\n      console.log(\"Exporting for Revision_FLoat_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Where Used Details.xlsx\");\r\n    } else if (widgetType === \"Plant_Assignment_Widget\") {\r\n      console.log(\"Exporting for Plant_Assignment_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"EAN_Manufacturing.xlsx\");\r\n    } else if (widgetType === \"Bos_Attribute_Widget\") {\r\n      console.log(\"Exporting for Bos_Attribute_Widget\"); // ADD THIS LINE\r\n      handleExportExcel(data, \"Bos_Attribute_Widget.xlsx\");\r\n    } else {\r\n      console.log(\r\n        \"Exporting with default filename for widgetType:\",\r\n        widgetType\r\n      ); // ADD THIS LINE\r\n      handleExportExcel(data, \"table-data.xlsx\"); // Default case\r\n    }\r\n  };\r\n\r\n  const handleRowClick = (row, event) => {\r\n    const { rows, rowsById } = table.getRowModel();\r\n    if (event.shiftKey && lastSelectedId) {\r\n      try {\r\n        const rowsToToggle = getRowRange(rows, row.id, lastSelectedId);\r\n        const isLastSelected = rowsById[lastSelectedId].getIsSelected();\r\n        rowsToToggle.forEach((r) => r.toggleSelected(isLastSelected));\r\n      } catch (e) {\r\n        console.error(\"Multi-select with shift+click failed:\", e);\r\n      }\r\n    } else {\r\n      row.toggleSelected(!row.getIsSelected());\r\n    }\r\n    setLastSelectedId(row.id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n    {showActionButtons === true && \r\n      <div className=\"toolkit my-3\">\r\n        <div className=\"d-flex justify-content-end button-container\">\r\n          <div className=\"d-flex\">\r\n            <CustomButton\r\n              variant=\"outline-primary\"\r\n              size=\"lg\"\r\n              onClick={handleSelectAll}\r\n              className=\"m-2\"\r\n              text=\"Select All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-secondary\"\r\n              size=\"lg\"\r\n              onClick={handleDeselectAll}\r\n              className=\"m-2\"\r\n              text=\"Deselect  All\"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-success\"\r\n              size=\"lg\"\r\n              onClick={handleExport}\r\n              className=\"m-2 border-bottom-10px\"\r\n              text=\"Export to CSV \"\r\n            />\r\n\r\n            <CustomButton\r\n              variant=\"outline-warning\"\r\n              size=\"lg\"\r\n              onClick={handleResetColumns}\r\n              className=\"m-2\"\r\n              text=\"Reset Columns\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n}\r\n      <div className=\"table-info\">\r\n        <p>{tableData.length} Items</p>\r\n      </div>\r\n      <DndContext\r\n        sensors={sensors}\r\n        collisionDetection={closestCenter}\r\n        modifiers={[restrictToHorizontalAxis]}\r\n        onDragEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          ref={tableRef}\r\n          className={`table-responsive ${isScrolled ? \"is-scrolled\" : \"\"}`}\r\n        >\r\n          <table\r\n            className= {`table ${showActionButtons === true ? 'custom-table':'custom-table not-selection'} table-hover`}\r\n            style={{\r\n              ...columnSizeVars,\r\n              width: table.getTotalSize(),\r\n            }}\r\n          >\r\n            <thead>\r\n              {table.getHeaderGroups().map((headerGroup) => (\r\n                <tr key={headerGroup.id}>\r\n                  <SortableContext\r\n                    items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                    strategy={horizontalListSortingStrategy}\r\n                  >\r\n                    {headerGroup.headers.map((header) => (\r\n                      <DraggableColumnHeader\r\n                        key={header.id}\r\n                        header={header}\r\n                        columns={columns}\r\n                        table={table}\r\n                      />\r\n                    ))}\r\n                  </SortableContext>\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody>\r\n              {table.getRowModel().rows.length > 0 ? (\r\n                table.getRowModel().rows.map((row) => (\r\n                  <tr\r\n                    key={row.id}\r\n                    onClick={(event) => handleRowClick(row, event)}\r\n                    className={rowSelection[row.id] ? \"row-selected\" : \"\"}\r\n                  >\r\n                    <SortableContext\r\n                      items={table.getVisibleLeafColumns().map((col) => col.id)}\r\n                      strategy={horizontalListSortingStrategy}\r\n                    >\r\n                      {row.getVisibleCells().map((cell) => (\r\n                        <DraggableCell\r\n                          key={cell.id}\r\n                          cell={cell}\r\n                          columns={columns}\r\n                          changedCells={row.original.changedCells} // Pass changed cells info\r\n                        />\r\n                      ))}\r\n                    </SortableContext>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td\r\n                    colSpan={table.getHeaderGroups()[0].headers.length}\r\n                    className=\"no-data p-2\"\r\n                  >\r\n                    No Table Data\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DndContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReusableTable;\r\n","import { useDispatch } from \"react-redux\";\r\n\r\nimport {\r\n  setParentDetailsLoading,\r\n  setSpecDocument,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService, loadWAFData, fetchData } from \"../utils/helpers\";\r\n\r\nconst useBOSWidget = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let email = window.widget.getValue(\"email\");\r\n\r\n  console.log(\"Email in useBOSWidget:\", email);\r\n  // console.log(\"Security context using preferences are\", securitycontext);\r\n\r\n  const handleBOSWidget = async (\r\n    collabSpace,\r\n    state,\r\n    objectId,\r\n    type,\r\n    parentName,\r\n    parentRevision\r\n  ) => {\r\n    try {\r\n      console.log(\"Object id is:\", objectId);\r\n      console.log(\"Object type is:\", type);\r\n      dispatch(setParentDetailsLoading(true));\r\n\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n\r\n      console.log(\"[useBOSWidget] CSRF Headers:\", headers);\r\n\r\n      // Step 1: Call Enovia Web Service\r\n      let baseURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/documents/parentId/${objectId}?parentRelName=SpecificationDocument`;\r\n\r\n      let parentDirection = type === \"Document\" ? \"to\" : \"from\";\r\n\r\n      let urlObjWAF = `${baseURL}&parentDirection=${parentDirection}`;\r\n      let ChildObject = await callEnoviaWebService(\r\n        \"GET\",\r\n        urlObjWAF,\r\n        \"\",\r\n        headers\r\n      );\r\n      console.log(\"SpecDetails Response:\", ChildObject);\r\n\r\n      if (\r\n        ChildObject &&\r\n        ChildObject.status &&\r\n        ChildObject.output.data.length > 0\r\n      ) {\r\n        let ChildObjectDocument = ChildObject.output.data.map((sSpec) => ({\r\n          id: sSpec.id,\r\n          title:\r\n            sSpec.dataelements.title && sSpec.dataelements.title.trim() !== \"\"\r\n              ? sSpec.dataelements.title\r\n              : sSpec.dataelements.secondaryTitle,\r\n          revision: sSpec.dataelements.revision,\r\n          state: sSpec.dataelements.stateNLS,\r\n          name: sSpec.dataelements.name,\r\n        }));\r\n\r\n        console.log(\r\n          \"[useBOSWidget] Extracted Spec Documents:\",\r\n          ChildObjectDocument\r\n        );\r\n        // if type is Document and then iterate ovet the\r\n        if (type === \"Document\") {\r\n          const revisionBody = {\r\n            data: [],\r\n          };\r\n          ChildObjectDocument.forEach((child) => {\r\n            const body = {\r\n              id: child.id,\r\n              identifier: child.id,\r\n              type: \"VPMReference\",\r\n              source: `${ENOVIA_BASE_URL}`,\r\n              relativePath: `/resources/v1/modeler/dseng/dseng:EngItem/${child.id}`,\r\n            };\r\n            revisionBody.data.push(body);\r\n          });\r\n          const RevisionUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/version/getGraph`;\r\n          const response = await callEnoviaWebService(\r\n            \"POST\",\r\n            RevisionUrl,\r\n            revisionBody,\r\n            headers\r\n          );\r\n          console.log(\"response is:\", response);\r\n          response.output.results.forEach((item) => {\r\n            // Find the latest version based on the 'revision' key\r\n            const latestVersion = item.versions.reduce((latest, current) => {\r\n              return convertRevisionToNumber(current.revision) >\r\n                convertRevisionToNumber(latest.revision)\r\n                ? current\r\n                : latest;\r\n            });\r\n\r\n            // Update 'isLatestRevision' for only the matching document\r\n            ChildObjectDocument = ChildObjectDocument.map((doc) => {\r\n              if (item.versions.some((version) => version.id === doc.id)) {\r\n                return {\r\n                  ...doc,\r\n                  isLatestRevision:\r\n                    doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n                };\r\n              }\r\n              return doc;\r\n            });\r\n          });\r\n\r\n          // Function to convert revision to a comparable numeric value\r\n          function convertRevisionToNumber(rev) {\r\n            if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n            let number = 0;\r\n            for (let i = 0; i < rev.length; i++) {\r\n              number =\r\n                number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n            }\r\n            return number; // Handles A-Z, AA-ZZ revisions\r\n          }\r\n\r\n          console.log(\"ChildObjectDocument is:\", ChildObjectDocument);\r\n        }\r\n        let requestBody;\r\n        let getUrl;\r\n        if (type === \"Document\") {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestSpecItemDetails\";\r\n          requestBody = {\r\n            SpecName: parentName, // Replace with actual SpecName if dynamic\r\n            SpecRevision: parentRevision, // Replace with actual SpecRevision if dynamic\r\n            Items: ChildObjectDocument.map((obj) => ({\r\n              ItemName: obj.name, // Replace dynamically if needed\r\n              ItemRevision: obj.revision,\r\n            })),\r\n          };\r\n        } else {\r\n          getUrl =\r\n            \"https://saasimplementationserverdev.azurewebsites.net/bosAttribute/getLatestItemSpecDetails\";\r\n          requestBody = {\r\n            ItemName: parentName, // Replace with actual ItemName if dynamic\r\n            ItemRevision: parentRevision, // Replace with actual revision if dynamic\r\n            Specifications: ChildObjectDocument.map((obj) => ({\r\n              SpecName: obj.name,\r\n              SpecRevision: obj.revision,\r\n            })),\r\n          };\r\n        }\r\n\r\n        console.log(\"Requested Body is:\", requestBody);\r\n\r\n        const response = await fetchData(\"POST\", getUrl, requestBody);\r\n\r\n        console.log(\"the response from node API is:\", response);\r\n\r\n        let mergedData = [];\r\n        if (response?.data?.data?.Specifications) {\r\n          // **Case 1: API Response Contains \"Specifications\"**\r\n          response.data.data.Specifications.forEach((spec) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (obj) =>\r\n                obj.name === spec.SpecName && obj.revision === spec.SpecRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              childName: spec.SpecName,\r\n              childRevision: spec.SpecRevision,\r\n              PrintOnPurchaseOrderRequired: spec.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: spec.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: spec.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: spec.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": spec[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else if (response?.data?.data?.Items) {\r\n          // get all the id's\r\n\r\n          // **Case 2: API Response Contains \"Items\"**\r\n          response.data.data.Items.forEach((item) => {\r\n            let matchingDoc = ChildObjectDocument.find(\r\n              (doc) =>\r\n                doc.name === item.ItemName && doc.revision === item.ItemRevision\r\n            );\r\n\r\n            mergedData.push({\r\n              childState: matchingDoc?.state || \"\",\r\n              childTitle: matchingDoc?.title || \"\",\r\n              childName: item.ItemName,\r\n              childRevision: item.ItemRevision,\r\n              childLatest: matchingDoc?.isLatestRevision || \"FALSE\",\r\n              PrintOnPurchaseOrderRequired: item.PrintOnPurchaseOrderRequired,\r\n              PrintOnWorkOrderRequired: item.PrintOnWorkOrderRequired,\r\n              WorkOrderDocumentRequired: item.WorkOrderDocumentRequired,\r\n              PrintOnReportOrderRequired: item.PrintOnReportOrderRequired,\r\n              \"SAP/JDE\": item[\"SAP/JDE\"],\r\n            });\r\n          });\r\n        } else {\r\n          console.warn(\"[useBOSWidget] Unexpected API response format.\");\r\n        }\r\n        console.log(\r\n          \"[useBOSWidget] Final Merged Data for Dispatch:\",\r\n          mergedData\r\n        );\r\n\r\n        dispatch(setSpecDocument(mergedData));\r\n        // You can now dispatch or return this data as needed\r\n      } else {\r\n        console.warn(\"[useBOSWidget] No connected childs.\");\r\n        dispatch(setSpecDocument([]));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[useBOSWidget] Error:\", error);\r\n      throw error; // Let the caller handle the error\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading state is reset\r\n    }\r\n  };\r\n\r\n  return { handleBOSWidget };\r\n};\r\n\r\nexport default useBOSWidget;\r\n\r\n// response.output.results.forEach((item) => {\r\n//   // Find the latest version based on the 'revision' key\r\n//   const latestVersion = item.versions.reduce((latest, current) => {\r\n//     return convertRevisionToNumber(current.revision) > convertRevisionToNumber(latest.revision)\r\n//       ? current\r\n//       : latest;\r\n//   });\r\n\r\n//   // Update 'isLatestRevision' for each document\r\n//   ChildObjectDocument = ChildObjectDocument.map((doc) => ({\r\n//     ...doc,\r\n//     isLatestRevision: doc.id === latestVersion.id ? \"TRUE\" : \"FALSE\",\r\n//   }));\r\n// });\r\n\r\n// // Function to convert revision to a comparable numeric value\r\n// function convertRevisionToNumber(rev) {\r\n//   if (/^\\d+$/.test(rev)) return parseInt(rev, 10); // Handle numeric revisions (1,2,3)\r\n\r\n//   let number = 0;\r\n//   for (let i = 0; i < rev.length; i++) {\r\n//     number = number * 26 + (rev.charCodeAt(i) - \"A\".charCodeAt(0) + 1);\r\n//   }\r\n//   return number; // Handles A-Z, AA-ZZ revisions\r\n// }\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData, setLoading } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  getDroppedObjectDetails,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\nimport useBOSWidget from \"./useBOSWidget\";\r\n\r\nconst useBOSDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handleBOSWidget } = useBOSWidget();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n\r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n\r\n          dispatch(setIsDroppedAction(true));\r\n\r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handleBOSWidget(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              draggedObjectData.Name,\r\n              draggedObjectData[\"Dropped Revision\"]\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handleBOSWidget]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      setLoading(true); // Start loading state\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        setLoading(false);\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useBOSDropableArea;\r\n","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { setDroppedObjectData } from \"../store/droppedObjectSlice\";\r\nimport { setIsDropped as setIsDroppedAction, setLoading } from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport useRevisions from \"./useRevisions\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_DOCUMENT_CREATION_OBJECT_TYPE,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n\r\nconst useDroppableArea = (widgetType) => {\r\n  console.log(\"widgetType useDroppablearea\", widgetType)\r\n  const { showErrorToast } = useToast();\r\n  const { fetchRevisionsAndParents } = useRevisions();\r\n  const dispatch = useDispatch();\r\n  // ✅ Use `useSelector` to get the latest values from Redux\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n\r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n\r\n        if (objectDetailsResult.success) {\r\n          // Fetch Revisions and Parents in parallel\r\n          const relativePath = objectDetailsResult.data.cardData.relativePath;\r\n          const [revisionParentData] = await Promise.all([\r\n            fetchRevisionsAndParents(\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType,\r\n              relativePath\r\n            ),\r\n          ]);\r\n          // Dispatch all updates together (batching updates)\r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n              parentDetails: revisionParentData || [],\r\n            })\r\n          );\r\n          console.log(\"[fetchObjectDetails] ✅ Redux store updated.\");\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        console.log(\"[fetchObjectDetails] 🏁 Ensuring loading is reset.\");\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, fetchRevisionsAndParents, showErrorToast]\r\n  );\r\n\r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n\r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          // const validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          let validTypes = [];\r\n          if (widgetType === \"documentCreationWidget\") {\r\n            validTypes = [\"VPMReference\"];\r\n          } else {\r\n            validTypes = [\"VPMReference\", \"Document\", \"Raw_Material\"];\r\n          }\r\n\r\n          if (!validTypes.includes(objectType)) {\r\n            if (widgetType == \"documentCreationWidget\"){\r\n            showErrorToast(MSG_INVALID_DOCUMENT_CREATION_OBJECT_TYPE);\r\n          }else{\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE)\r\n          }\r\n            dispatch(setLoading(false)); \r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n\r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n\r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n\r\nexport default useDroppableArea;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { loadInterCom } from \"../utils/helpers\";\r\n\r\nconst useInterComSearch = () => {\r\n  const [socket, setSocket] = useState(null);\r\n  const [InterCom, setInterCom] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // console.log(\"[useInterComSearch] Loading InterCom module\");\r\n        const interComInstance = await loadInterCom();\r\n        setInterCom(interComInstance);\r\n      } catch (error) {\r\n        console.error(\r\n          \"[useInterComSearch] Error initializing InterCom:\",\r\n          error\r\n        );\r\n      }\r\n    };\r\n    loadData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (socket) {\r\n        socket.disconnect();\r\n        // console.log(\"[useInterComSearch] Socket disconnected\");\r\n      }\r\n    };\r\n  }, [socket]);\r\n\r\n  const performSearch = useCallback(\r\n    (searchText, searchOpts, onObjectsSelected) => {\r\n      // Check if InterCom is loaded\r\n      if (!InterCom) {\r\n        console.warn(\"[useInterComSearch] InterCom is not loaded yet.\");\r\n        return;\r\n      }\r\n\r\n      const socketName =\r\n        \"socket\" + new Date().toISOString().replace(/[-:]/g, \"\");\r\n      const newSocket = new InterCom.Socket(socketName, {\r\n        dispatchRetryInternal: 0,\r\n      });\r\n      newSocket.subscribeServer(\"SearchComServer\");\r\n      setSocket(newSocket);\r\n\r\n      console.log(\r\n        \"[useInterComSearch] performSearch called with:\",\r\n        searchText,\r\n        searchOpts\r\n      );\r\n\r\n      const widgetId = window.widget?.id;\r\n      // console.log(\"[useInterComSearch] widget id:\", widgetId);\r\n\r\n      const finalSearchOpts = {\r\n        ...searchOpts,\r\n        widget_id: widgetId,\r\n        app_socket_id: socketName,\r\n        default_search_criteria: searchText,\r\n      };\r\n\r\n      // Register the search context (if needed)\r\n      console.log(\r\n        \"[useInterComSearch] Dispatching RegisterContext event with:\",\r\n        finalSearchOpts\r\n      );\r\n      newSocket.dispatchEvent(\"RegisterContext\", finalSearchOpts);\r\n\r\n      // Dispatch the search event\r\n      // console.log(\r\n      //   \"[useInterComSearch] Dispatching InContextSearch event with:\",\r\n      //   finalSearchOpts\r\n      // );\r\n      newSocket.dispatchEvent(\"InContextSearch\", finalSearchOpts);\r\n\r\n      // Add a listener for search results\r\n      const handleSearchResults = (data) => {\r\n        console.log(\"[useInterComSearch] Search results received:\", data);\r\n        if (onObjectsSelected) {\r\n          onObjectsSelected(data);\r\n        }\r\n      };\r\n\r\n      console.log(\r\n        \"[useInterComSearch] Adding listener for Selected_Objects_search\"\r\n      );\r\n      newSocket.addListener(\"Selected_Objects_search\", handleSearchResults);\r\n    },\r\n    [InterCom]\r\n  );\r\n\r\n  return {\r\n    performSearch,\r\n  };\r\n};\r\n\r\nexport default useInterComSearch;\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchProductChildren = async (headers, objectId, type) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n\r\n  let urlObjWAF =\r\n    `${ENOVIA_BASE_URL}/resources/v1/modeler/dseng/dseng:EngItem/`;\r\n  urlObjWAF += objectId;\r\n  urlObjWAF += \"/expand\";\r\n  let body = {\r\n    expandDepth: 1,\r\n    type_filter_bo: [\"VPMReference\"],\r\n    type_filter_rel: [\"VPMInstance\"],\r\n  };\r\n\r\n  try {\r\n    console.log(\"[SearchCAService] ProductId is:\", objectId);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = (url, Method, classifyBody) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: Method,\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(classifyBody),\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    const response = await fetchData(urlObjWAF, \"POST\", body);\r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n    const { member } = response;\r\n\r\n    if (member) {\r\n      let childs = response.member\r\n        .filter(\r\n          (member) =>\r\n            (member.type === \"VPMReference\" ||\r\n              member.type === \"Raw_Material\") &&\r\n            member.id !== objectId\r\n        )\r\n        .map((member) => ({\r\n          id: member.id,\r\n          type: member.type,\r\n          name: member.title,\r\n          state: member.state,\r\n        }));\r\n\r\n      // If there are child items, we need to fetch classification data\r\n      if (childs.length > 0) {\r\n        // Use Promise.all to handle multiple async operations\r\n        await Promise.all(\r\n          childs.map(async (child) => {\r\n            if (child.state.toLowerCase() === \"released\") {\r\n              let classesurl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${child.id}?$mask=dslib:ClassificationAttributesMask`;\r\n              const classResponse = await fetchData(classesurl, \"GET\", \"\");\r\n              console.log(\"classResponse->\", classResponse);\r\n\r\n              const classIds = classResponse.member.flatMap((member) => {\r\n                if (member.ClassificationAttributes?.member) {\r\n                  return member.ClassificationAttributes.member.map(\r\n                    (classification) => classification.ClassID\r\n                  );\r\n                }\r\n                return [];\r\n              });\r\n              child.classes = classIds; // Adding classes of released child\r\n            }\r\n          })\r\n        );\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        data: childs,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error while Fetching\", error);\r\n    return { success: false, data: [], error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n \r\nexport const GetFlowDownCADetails = async (flowDownCA, headers) => {\r\n  let CADetails = { CAAtt: [] };\r\n  console.log(\"We are into Search CA Details\");\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n \r\n  try {\r\n    const WAFData = await loadWAFData();\r\n \r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n \r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n \r\n    // 1st API call to search for the Change Action\r\n    let urlObjWAF = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/search?searchStr=${flowDownCA}`;\r\n    const searchResponse = await fetchData(urlObjWAF);\r\n    const routeData = (searchResponse?.data || []).find(item => item.type === \"Route\");\r\n \r\n    if (routeData) {\r\n        const RouteID = routeData.identifier;\r\n        const RouteStatus = routeData.state;\r\n        const RouteURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dsrt/routes/${RouteID}`;\r\n        const RouteDetails = await fetchData(RouteURL);\r\n        const ChangeData = (RouteDetails?.data || []).find(item => item.type === \"Change Action\");\r\n        if(ChangeData){\r\n            const MFGCAID = ChangeData.identifier;\r\n            const CAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${MFGCAID}?$fields=proposedChanges,flowDown`;\r\n            const CAresponse = await fetchData(CAUrl);\r\n            if (CAresponse) {\r\n                for (const item of CAresponse.isFlowDownOf || []) {\r\n                  if (item.type === \"Change Action\") {\r\n                    const EngCAUrl = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${item.identifier}`;\r\n                    const EngCAResponse = await fetchData(EngCAUrl);\r\n                    if (EngCAResponse) {\r\n                        CADetails.CAAtt.push({\r\n                          CATitle: EngCAResponse.title,\r\n                          CAState: EngCAResponse.state,\r\n                        });\r\n                      }\r\n                  }\r\n                }\r\n            }\r\n        }\r\n        CADetails[\"MCOState\"] = RouteStatus;\r\n        CADetails[\"MCOTitle\"] = flowDownCA;\r\n    }    \r\n    console.log(\"Final CA Details\", CADetails);\r\n    return CADetails;\r\n  } catch (error) {\r\n    console.error(\"Error in SearchCA:\", error);\r\n    throw error;\r\n  }\r\n};","import { useDispatch } from \"react-redux\";\r\n\r\nimport { getUserGroupCollab } from \"../services/api/PlantAssignment/userGroupService\";\r\nimport { getAllPlants } from \"../services/api/PlantAssignment/allPlantSevice\";\r\n\r\nimport { fetchProductChildren } from \"../services/api/PlantAssignment/plantChildrenService\";\r\nimport { fetchCADetails } from \"../services/api/PlantAssignment/CADetailService\";\r\nimport { fetchAssignedPlants } from \"../services/api/PlantAssignment/assignedPlantService\";\r\n\r\n\r\nimport {\r\n  setCAAllPlants,\r\n  setCAHeaders,\r\n  setCAItemDetails,\r\n  setCAName,\r\n  setHeaders,\r\n  setIsMFGCA,\r\n  setParentDetailsLoading,\r\n  setPlantObjectData,\r\n  setProductChildren,\r\n  setProposedChanges,\r\n  setCAData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport { useState } from \"react\";\r\nimport { MSG_FETCH_CSRF_HEADERS_FAILED } from \"../utils/toastMessages\";\r\nimport useToast from \"./useToast\";\r\nimport { fetchCsrfToken } from \"../services/api/PlantAssignment/fetchCsrfService\";\r\nimport { initWidget } from \"../lib/widget\";\r\nimport { callEnoviaWebService } from \"../utils/helpers\";\r\n\r\nconst usePlantAssignment = () => {\r\n  const { showErrorToast } = useToast();\r\n  const dispatch = useDispatch();\r\n\r\n  let email = window.widget.getValue(\"email\");\r\n  console.log(\"Email in usePlantAssignment:\", email);\r\n\r\n  const handlePlantAssignment = async (collabSpace, state, objectId, type) => {\r\n    try {\r\n      dispatch(setParentDetailsLoading(true)); // Start loading state\r\n\r\n      // Fetch CSRF headers\r\n      const headers = await fetchCsrfToken();\r\n      if (!headers) {\r\n        showErrorToast(MSG_FETCH_CSRF_HEADERS_FAILED);\r\n        return;\r\n      }\r\n      console.log(\"[UsePlantAssignment] Headers:\", headers);\r\n\r\n      let ItemDetails = [];\r\n\r\n      // Handle \"Change Action\" type separately\r\n      if (type === \"Change Action\") {\r\n        let isMFGCA = false;\r\n        console.log(\"The object Type is Change Action\");\r\n        const fetchChangeActionData = async () => {\r\n          const CAURL = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/changeaction/${objectId}?%24fields=proposedChanges,realizedChanges`;\r\n          const response = await callEnoviaWebService(\r\n            \"GET\",\r\n            CAURL,\r\n            \"\",\r\n            headers\r\n          );\r\n          console.log(\"Response from Change Action URL:\", response);\r\n\r\n          if (response.status && response.output) {\r\n            const realizedChanges = response.output.realizedChanges.map(\r\n              (realizedChange) => realizedChange.where.identifier\r\n            );\r\n            const changeProcessingPromises =\r\n              response.output.proposedChanges.map(async (change) => {\r\n                let ItemId = change.where.identifier;\r\n                let ItemType = change.where.type;\r\n\r\n                if (change.target === \"NewVersion\") {\r\n                  const sLatestID = await getLatestRevision(\r\n                    ItemId,\r\n                    ItemType,\r\n                    headers\r\n                  );\r\n                  if (realizedChanges.includes(sLatestID)) {\r\n                    ItemId = sLatestID;\r\n                  }\r\n                }\r\n                if (\r\n                  ItemType !== \"Raw_Material\" &&\r\n                  ItemType !== \"VPMReference\"\r\n                ) {\r\n                  isMFGCA = true;\r\n                  const mfgDetails = await getScopedItms(ItemId, headers);\r\n                  console.log(\"MFG Details are:\", mfgDetails);\r\n                  ItemId = mfgDetails.identifier;\r\n                  ItemType = mfgDetails.type;\r\n                }\r\n                if (ItemId !== undefined && ItemType !== undefined) {\r\n                  try {\r\n                    const [ItemPlants, Iteminfo] = await Promise.all([\r\n                      getAssignedClasses(ItemId, headers),\r\n                      getItemDetails(ItemId, ItemType, headers),\r\n                    ]);\r\n\r\n                    ItemDetails.push({\r\n                      ItemId,\r\n                      ItemType,\r\n                      ItemState: Iteminfo?.member[0].state || \"N/A\",\r\n                      ItemTitle: Iteminfo?.member[0].title || \"N/A\",\r\n                      ItemMBOM:  Iteminfo?.member[0]?.[\"dseno:EnterpriseAttributes\"]?.EMR_hasMBOM || \"N/A\",\r\n                      ItemPlants,\r\n                    });\r\n                  } catch (err) {\r\n                    console.error(\r\n                      `Error processing change for item ${ItemId}:`,\r\n                      err\r\n                    );\r\n                  }\r\n                }\r\n              });\r\n\r\n            await Promise.all(changeProcessingPromises);\r\n          } else {\r\n            console.error(\"Invalid response structure or no proposed changes.\");\r\n          }\r\n        };\r\n        const CAAllPlantsData = async () => {\r\n          // Replace this with your actual API call\r\n          const allPlants = await getAllPlants(\r\n            [collabSpace],\r\n            headers,\r\n            objectId\r\n          ); // getAllPlants wants collabspace as an array.\r\n          console.log(\"Parallel API response:\", allPlants);\r\n          dispatch(setCAAllPlants(allPlants));\r\n        };\r\n\r\n        // Run both functions in parallel\r\n        await Promise.all([fetchChangeActionData(), CAAllPlantsData()]);\r\n\r\n        dispatch(setParentDetailsLoading(false));\r\n        dispatch(setCAItemDetails(ItemDetails));\r\n        dispatch(setIsMFGCA(isMFGCA));\r\n        dispatch(setCAHeaders(headers));\r\n      } else {\r\n        // Step 1: Fetch user group collaboration spaces\r\n        const userGroupCollab = await getUserGroupCollab(\r\n          headers,\r\n          objectId,\r\n          email\r\n        );\r\n        console.log(\"[Plant Assignment] User Groups:\", userGroupCollab);\r\n\r\n        let allCollabSpaces = [...userGroupCollab, collabSpace];\r\n        console.log(\r\n          \"[Use Plant Assignment] All CollabSpaces:\",\r\n          allCollabSpaces\r\n        );\r\n\r\n        // Step 2: Fetch all plants if collab spaces exist\r\n        let allPlants = [];\r\n        if (allCollabSpaces.length > 0) {\r\n          allPlants = await getAllPlants(allCollabSpaces, headers, objectId);\r\n          console.log(\"[Use Plant Assignment] All Plants:\", allPlants);\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No CollabSpaces found.\");\r\n        }\r\n\r\n        // Step 3: Fetch assigned plants if there are any\r\n        if (allPlants.length > 0) {\r\n          const plants = await fetchAssignedPlants(\r\n            allPlants,\r\n            headers,\r\n            objectId\r\n          );\r\n          console.log(\"[Use Plant Assignment]: \", plants);\r\n\r\n          if (plants.success) {\r\n            dispatch(setPlantObjectData(plants.data.plantData));\r\n            dispatch(setHeaders(headers));\r\n          } else {\r\n            console.error(\"Failed to fetch plant data.\");\r\n          }\r\n        } else {\r\n          console.warn(\"[Use Plant Assignment] No Plants found.\");\r\n        }\r\n\r\n        // Step 4: Fetch Product Children based on type\r\n        let getProductChildren = {};\r\n        if (type === \"Raw_Material\") {\r\n          getProductChildren = { success: true, data: [] };\r\n        } else {\r\n          getProductChildren = await fetchProductChildren(\r\n            headers,\r\n            objectId,\r\n            type\r\n          );\r\n        }\r\n\r\n        console.log(\"Type After:\", type);\r\n        console.log(\r\n          \"[Use Plant Assignment] Product Children:\",\r\n          getProductChildren\r\n        );\r\n\r\n        if (getProductChildren.success) {\r\n          dispatch(setProductChildren(getProductChildren.data));\r\n        }\r\n\r\n        // Step 5: Fetch Change Action details\r\n        const getCaDetails = await fetchCADetails(headers, objectId, state);\r\n        console.log(\"[Use Plant Assignment] CA Details:\", getCaDetails);\r\n\r\n        if (getCaDetails.success) {\r\n          dispatch(setCAName(getCaDetails.data));\r\n          dispatch(setProposedChanges(getCaDetails.proposedChanges));\r\n          dispatch(setCAData(getCaDetails.CAData));\r\n        }\r\n\r\n        console.log(\"[Plant Assignment] All services executed successfully.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Plant Assignment] Error:\", error);\r\n      showErrorToast(\"An error occurred while fetching plant assignment data.\");\r\n    } finally {\r\n      dispatch(setParentDetailsLoading(false)); // Ensure loading is disabled in all cases\r\n    }\r\n  };\r\n\r\n  return { handlePlantAssignment };\r\n};\r\n\r\nexport default usePlantAssignment;\r\n\r\n// Function to call the relevant URL for a ClassifiedItem using a single identifier\r\nasync function getAssignedClasses(identifier, headers) {\r\n  const plantIdData = [];\r\n \r\n  const url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslib/dslib:ClassifiedItem/${identifier}?$mask=dslib:ClassificationAttributesMask`;\r\n \r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n    console.log(`Response for identifier ${identifier}:`, itemResponse);\r\n \r\n    if (\r\n      itemResponse.output.member &&\r\n      itemResponse.output.member[0].ClassificationAttributes\r\n    ) {\r\n      itemResponse.output.member[0].ClassificationAttributes.member.forEach(\r\n        (classification) => {\r\n          const classId = classification.ClassID;\r\n          let plantName = null;\r\n          let erpStatus = null;\r\n \r\n          classification.Attributes.forEach((attribute) => {\r\n            if (attribute.name.includes(\"PlantId\")) {\r\n              plantName = attribute.value;\r\n            }\r\n            if (attribute.name.includes(\"ERPStatus\")) {\r\n              erpStatus = attribute.value;\r\n            }\r\n          });\r\n \r\n          if (plantName !== null) {\r\n            plantIdData.push({\r\n              PlantName: plantName,\r\n              PlantID: classId,\r\n              PlantERPStatus: erpStatus || \"Pending\", // Optional: set to empty string if not found\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      console.log(`No valid classification data for identifier ${identifier}`);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching assigned classes for ${identifier}:`, error);\r\n  }\r\n \r\n  return plantIdData;\r\n}\r\n\r\nasync function getItemDetails(identifier, ItemType, headers) {\r\n  let url = \"\";\r\n\r\n  // Check if the ItemType is 'Raw_Material' and adjust the URL accordingly\r\n  if (ItemType === \"Raw_Material\") {\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`;\r\n  } else {\r\n    // Default URL for EngItem\r\n    url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dseng/dseng:EngItem/${identifier}?mask=dsmveng:EngItemMask.Details`;\r\n  }\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return itemResponse.output;\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n\r\nasync function getLatestRevision(identifier, type, headers) {\r\n  const revurl = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dslc/version/getGraph`;\r\n  const ret = \"\";\r\n  try {\r\n    const relativePath =\r\n      type === \"Raw_Material\"\r\n        ? `/resources/v1/modeler/dsrm/dsrm:RawMaterial/${identifier}`\r\n        : `/resources/v1/modeler/dseng/dseng:EngItem/${identifier}`;\r\n\r\n    const Body = {\r\n      data: [\r\n        {\r\n          id: identifier,\r\n          identifier: identifier,\r\n          type: type,\r\n          source: \"https://oi000186152-us1-space.3dexperience.3ds.com/enovia\",\r\n          relativePath: relativePath,\r\n        },\r\n      ],\r\n    };\r\n\r\n    // Make the API call with the dynamically created body\r\n    const response = await callEnoviaWebService(\r\n      \"POST\",\r\n      revurl,\r\n      JSON.stringify(Body),\r\n      headers\r\n    );\r\n\r\n    // Check if the response contains status and output properties\r\n    if (response.status && response.output) {\r\n      // Loop through each result in the response and check for ancestors\r\n      for (const result of response.output.results) {\r\n        if (\r\n          result.ancestors &&\r\n          result.ancestors.some(\r\n            (ancestor) => ancestor.identifier === identifier\r\n          )\r\n        ) {\r\n          return result.id;\r\n        }\r\n      }\r\n    } else {\r\n      console.error(\r\n        \"API response does not contain the expected 'status' and 'output'.\"\r\n      );\r\n      return ret;\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching getLatestRevision for ${identifier}:`, error);\r\n    return ret;\r\n  }\r\n}\r\nasync function getScopedItms(identifier, headers) {\r\n  let url = \"\";\r\n\r\n  url = `https://oi000186152-us1-space.3dexperience.3ds.com/enovia/resources/v1/modeler/dsmfg/dsmfg:MfgItem/${identifier}/dsmfg:ScopeEngItem`;\r\n\r\n  try {\r\n    const itemResponse = await callEnoviaWebService(\"GET\", url, \"\", headers);\r\n\r\n    if (itemResponse.status && itemResponse.output) {\r\n      return {\r\n        identifier: itemResponse.output.member[0].ScopeEngItem.identifier,\r\n        type: itemResponse.output.member[0].ScopeEngItem.type,\r\n      };\r\n    } else {\r\n      console.log(`No valid response for identifier ${identifier}`);\r\n      return {}; // Return an empty object if the response is invalid\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching item details for ${identifier}:`, error);\r\n    return {}; // Return an empty object on error\r\n  }\r\n}\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getUserGroupCollab = async (headers, objectId, email) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[UserGroup Status] ProductId: \", objectId);\r\n    const WAFData = await loadWAFData();\r\n    let urlObjWAF =\r\n      `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/sharing/getSharing`;\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(urlObjWAF, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify({ data: [{ objectID: objectId }] }),\r\n        // data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let userGroup = [];\r\n\r\n    let userGroupBody = { groups: [] };\r\n    if (response) {\r\n      response.results.forEach((result) => {\r\n        result.sharings.userGroups.forEach((group) => {\r\n          // Check if the access is \"Can Edit\"\r\n          if (group.access === \"Can Edit\") {\r\n            userGroupBody.groups.push({\r\n              uri: group.userGroupID.replace(/[<>]/g, \"\"),\r\n            });\r\n          }\r\n        });\r\n      });\r\n      if (userGroupBody.groups.length > 0) {\r\n        let grpUrl =\r\n          \"https://oi000186152-us1-usersgroup.3dexperience.3ds.com/3drdfpersist/resources/v1/usersgroup/groups?select=uri,members,title\";\r\n        const grpresponse = await new Promise((resolve, reject) => {\r\n          WAFData.authenticatedRequest(grpUrl, {\r\n            method: \"POST\",\r\n            headers: {\r\n              // ...headers,\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            data: JSON.stringify(userGroupBody),\r\n            type: \"json\",\r\n            onComplete: resolve,\r\n            onFailure: reject,\r\n          });\r\n        });\r\n        console.log(\"Group Response is:\", grpresponse);\r\n        //   const Email = \"test\"; //Logged in person mail need to change and get dynamically\r\n        if (grpresponse) {\r\n          userGroup = grpresponse.groups\r\n            .filter((group) => group.members.includes(email))\r\n            .map((group) => group.title);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"[UserGroup Status] User Groups:\", userGroup);\r\n    // Return the user groups\r\n    return userGroup;\r\n  } catch (error) {\r\n    console.error(\"[UserGroup Status] Error occurred:\", error);\r\n    throw error; // Rethrow the error to handle it in the calling function\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nimport { SearchCA } from \"./searchCAService\";\r\nimport {GetFlowDownCADetails} from \"./getRouteDetails\";\r\n\r\nexport const fetchAssignedPlants = async (\r\n  allPlants,\r\n  headers,\r\n  objectId // ProductId\r\n) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    console.log(\"[Assigned Plant Service] Plant Members:\", allPlants);\r\n\r\n    const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:ClassifiedItem/${objectId}?$mask=dslib:ClassificationAttributesMask`;\r\n\r\n    const WAFData = await loadWAFData();\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(libraryDataURL, {\r\n        method: \"GET\",\r\n        headers,\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    console.log(\"[Assigned Plant Service] Data received:\", response);\r\n\r\n    let initialAssignedClasses = [];\r\n    let uniqueInAllclasses = [];\r\n\r\n    // Getting ClassMembers\r\n    let ClassExtensions = response.member[0].ClassificationAttributes.member;\r\n\r\n    // Process ClassExtensions and wait for promises to resolve\r\n    await Promise.all(\r\n      ClassExtensions.map(async (classItem) => {\r\n        console.log(\"Class Item is \", classItem);\r\n        for (let parentClass of allPlants) {\r\n          if (classItem.ClassID === parentClass.id) {\r\n            let PlantName = parentClass.title;\r\n            PlantName = PlantName.replace(\"Plant\", \"\").replace(/\\s+/g, \"\");\r\n            let obj = { id: classItem.ClassID, title: parentClass.title };\r\n\r\n            const promiseArray = classItem.Attributes.map((eachAttribute) => {\r\n              if (\r\n                eachAttribute.name.includes(\"FlowDownCA\") &&\r\n                eachAttribute.value\r\n              ) {\r\n                return GetFlowDownCADetails(eachAttribute.value, headers).then(\r\n                  (flowDownCADetails) => {\r\n                    if (flowDownCADetails) {\r\n                      console.log(flowDownCADetails);\r\n                      obj[\"MFGChange\"] = flowDownCADetails?.MCOTitle;\r\n                      obj[\"MFGStatus\"] = flowDownCADetails?.MCOState;\r\n\r\n                      let CATitle = \"\",\r\n                        CAState = \"\";\r\n\r\n                      flowDownCADetails.CAAtt.forEach((CA) => {\r\n                        CATitle += \",\" + CA.CATitle;\r\n                        CAState += \",\" + CA.CAState;\r\n                      });\r\n\r\n                      obj[\"Change\"] = CATitle.slice(1); // Remove leading comma\r\n                      obj[\"ChangeStatus\"] = CAState.slice(1); // Remove leading comma\r\n                    }\r\n                  }\r\n                );\r\n              } else {\r\n                // Handle non-async attributes\r\n                obj[eachAttribute.name.replace(PlantName, \"\").trim()] =\r\n                  eachAttribute.value;\r\n                return Promise.resolve(); // Create a resolved Promise for consistency\r\n              }\r\n            });\r\n\r\n            // Wait for all promises to complete\r\n            await Promise.all(promiseArray);\r\n            initialAssignedClasses = [...initialAssignedClasses, obj];\r\n            console.log(\"Initial Assigned Classes\", initialAssignedClasses);\r\n            console.log(\"Processed Object:\", obj);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    console.log(\r\n      \"[Assigned Plant Service] Initial Assigned Classes:\",\r\n      initialAssignedClasses\r\n    );\r\n    uniqueInAllclasses = allPlants.filter(\r\n      (allClass) =>\r\n        !initialAssignedClasses.some((assigned) => assigned.id === allClass.id)\r\n    );\r\n    console.log(\"uniqueInAllclasses--:\", uniqueInAllclasses);\r\n\r\n    // Dispatch only after the classes are fully populated\r\n\r\n    return {\r\n      success: true,\r\n      data: {\r\n        plantData: {\r\n          allPlants: allPlants,\r\n          initialAssignedPlants: initialAssignedClasses,\r\n          uniquePlants: uniqueInAllclasses,\r\n        },\r\n      },\r\n    };\r\n  } catch (error) {\r\n    console.error(\"[Object Details] Failed to fetch data:\", error);\r\n    return { success: false, error };\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\nexport const fetchCADetails = async (headers, objectID, state) => {\r\n  const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n  let resObejct = false;\r\n  let proposedChangesArray = [];\r\n  let CADetails = {\"CAName\":\"\", \"CAStatus\":\"\"};\r\n  const URLCADetails =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/setPreferences`;\r\n \r\n  let body = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    relations: [\"caproposedwhere_from\"],\r\n    allRelationsMode: false,\r\n    publicationsMode: false,\r\n    computeWithInstances: false,\r\n    attributesForView: [\"ds6w:status\", \"ds6w:type\", \"ds6w:identifier\",\"ds6w:label\"],\r\n    label: \"ENXENG_AP-e1331143-1734517777960\",\r\n    lang: \"en\",\r\n    ghostMode: false,\r\n  };\r\n  let url2 =\r\n    `${ENOVIA_BASE_URL}/resources/enorelnav/v2/navigate/getEcosystem`;\r\n  let bd = {\r\n    widgetId: \"ENORIPE_Relations_Preview_2751_2038-15:33:22\",\r\n    responseMode: \"objectsByPatterns\",\r\n    label: \"ENXENG_AP-e1331143-1734517780491\",\r\n    ids: [objectID],\r\n  };\r\n \r\n  try {\r\n    console.log(\"[Get CA Details] Product ID:\", objectID);\r\n \r\n    const WAFData = await loadWAFData();\r\n \r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(URLCADetails, {\r\n        method: \"POST\",\r\n        headers: {\r\n          ...headers,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: JSON.stringify(body),\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n \r\n    console.log(\"[Get CA Details Service] Data received:\", response);\r\n \r\n    if (response.status === \"OK\") {\r\n      const response2 = await new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url2, {\r\n          method: \"POST\",\r\n          headers: {\r\n            ...headers,\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          data: JSON.stringify(bd),\r\n          type: \"json\",\r\n          onComplete: resolve,\r\n          onFailure: reject,\r\n        });\r\n      });\r\n \r\n      console.log(\"[Get CA Details Service] Data received:\", response2);\r\n      if (response2.objectsByPatterns.caproposedwhere_from) {\r\n        await Promise.all(\r\n          response2.objectsByPatterns.caproposedwhere_from.map(async (itm) => {\r\n            const status = itm[\"ds6w:status\"].slice(14);\r\n            const CAName = itm[\"ds6w:label\"];\r\n            if (status !== \"Complete\") {\r\n              let url3 = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslc/changeaction/${itm.id}?$fields=proposedChanges,flowDown`;\r\n \r\n              const response3 = await new Promise((resolve, reject) => {\r\n                WAFData.authenticatedRequest(url3, {\r\n                  method: \"GET\",\r\n                  headers,\r\n                  type: \"json\",\r\n                  onComplete: resolve,\r\n                  onFailure: reject,\r\n                });\r\n              });\r\n \r\n              if (Array.isArray(response3.proposedChanges)) {\r\n                response3.proposedChanges.forEach((proposedChange) => {\r\n                  proposedChangesArray.push({\r\n                    identifier: proposedChange.where.identifier,\r\n                    action: proposedChange.whats[0].what,\r\n                  });\r\n                });\r\n              }\r\n \r\n              if (state.toLowerCase() === \"released\") {\r\n                resObejct = proposedChangesArray.some(\r\n                  (proposedChange) =>\r\n                    proposedChange.identifier === objectID &&\r\n                    proposedChange.action === \"Modify\"\r\n                );\r\n              } else {\r\n                resObejct = true;\r\n              }\r\n \r\n              if(resObejct){\r\n                CADetails[\"CAName\"] = CAName;\r\n                CADetails[\"CAStatus\"] = status;\r\n              }\r\n            }\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      console.error(\"Unable to Fetch the \");\r\n    }\r\n    console.log(\"Status is coming inside 7\");\r\n    console.log(\"Response Object is:\", resObejct);\r\n \r\n    return {\r\n      success: true,\r\n      data: resObejct,\r\n      CAData : CADetails,\r\n      proposedChanges: proposedChangesArray,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Failed Request:\", {\r\n      url: URLCADetails,\r\n      headers,\r\n      body,\r\n      error,\r\n    });\r\n \r\n    throw error;\r\n  }\r\n};","import { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  setDroppedObjectData,\r\n  setInitialDroppedObjectData,\r\n  setPlantObjectData,\r\n} from \"../store/droppedObjectSlice\";\r\nimport {\r\n  setIsDropped as setIsDroppedAction,\r\n  setLoading,\r\n} from \"../store/droppedObjectSlice\";\r\n// Custom hook\r\nimport usePlantAssignment from \"./usePlantAssignment\";\r\n// Reusable services\r\nimport {\r\n  initializeDroppableArea as initDroppable,\r\n  // fetchCsrfTokenAndDependencies as fetchCsrfService,\r\n  // fetchObjectDetails as fetchObjectDetailsService,\r\n  getDroppedObjectDetails,\r\n  // fetchCardOwnerDetails as fetchCardOwnerDetailsService,\r\n} from \"../services/api/droppableService\";\r\nimport useToast from \"../hooks/useToast\";\r\nimport {\r\n  MSG_FETCH_CSRF_HEADERS_FAILED,\r\n  MSG_FETCH_OBJECT_DETAILS_FAILED,\r\n  MSG_INVALID_OBJECT_TYPE,\r\n  MSG_UNEXPECTED_ERROR,\r\n} from \"../utils/toastMessages\";\r\n \r\nconst usePlantDropableArea = () => {\r\n  const { showErrorToast } = useToast();\r\n  const { handlePlantAssignment } = usePlantAssignment();\r\n  const isDropped = useSelector((state) => state.droppedObject.isDropped);\r\n  const loading = useSelector((state) => state.droppedObject.loading);\r\n  const dispatch = useDispatch();\r\n \r\n  const fetchObjectDetails = useCallback(\r\n    async (dataItems) => {\r\n      try {\r\n        const objectDetailsResult = await getDroppedObjectDetails({\r\n          dataItems,\r\n        });\r\n        // const objectDetailsResult = {\r\n        //   success: \"true\",\r\n        //   data: {\r\n        //     cardData: {\r\n        //       \"Title\": \"PRD90100\",\r\n        //       \"Type\": \"Physical Product\",\r\n        //       \"Maturity State\": \"In Work\",\r\n        //       \"Owner\": \"Sudarshan Sambamurthy\",\r\n        //       \"Collaborative Space\": \"Micro Motion\",\r\n        //       \"Collaborative Space Title\": \"MSOL-Micro Motion\",\r\n        //       \"Description\": \"\",\r\n        //       \"Dropped Revision\": \"AA\",\r\n        //       \"Dropped Revision ID\": \"6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Latest Released Revision\": \"\",\r\n        //       \"Latest Released Revision ID\": \"\",\r\n        //       \"EIN\": \"PRD90100\",\r\n        //       \"CAD Format\": \"\",\r\n        //       \"imageURL\": \"https://oi000186152-us1-space.3dexperience.3ds.com:443/enovia/snresources/images/icons/large/I_VPMNavProduct108x144.png\",\r\n        //       \"relativePath\": \"/resources/v1/modeler/dseng/dseng:EngItem/6B8F27BDB2680A0067EE217D00044C1B\",\r\n        //       \"Name\": \"prd-OI000186152-00090100\",\r\n        //       \"organization\": \"BU-0000001\",\r\n        //       \"Latest Revision\": \"AA\",\r\n        //       \"MFGCA\": false\r\n        //   },\r\n        //   },\r\n        // };\r\n \r\n        // const cardownerResult = await fetchCardOwnerDetailsService({\r\n        //   dataItems,\r\n        //   headers,\r\n        // });\r\n \r\n        if (objectDetailsResult.success) {\r\n          // Merge the data from both services\r\n          // const combineData = {\r\n          //   cardData: objectDetailsResult.data.cardData,\r\n          //   ownerData: cardownerResult.data.ownerData,\r\n          // };\r\n \r\n          dispatch(\r\n            setDroppedObjectData({\r\n              cardData: objectDetailsResult.data.cardData,\r\n            })\r\n          );\r\n \r\n          const draggedObjectData = objectDetailsResult.data.cardData;\r\n          console.log(\"[Dragged Items are]\", draggedObjectData);\r\n \r\n          dispatch(setIsDroppedAction(true));\r\n \r\n          // call usePlantAssignment after successfully fetching object details\r\n          if (objectDetailsResult) {\r\n            await handlePlantAssignment(\r\n              draggedObjectData[\"Collaborative Space\"],\r\n              draggedObjectData[\"Maturity State\"],\r\n              dataItems[0]?.objectId,\r\n              dataItems[0]?.objectType\r\n            );\r\n          }\r\n        } else {\r\n          showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[FetchObjectDetails] Error fetching details:\", error);\r\n        showErrorToast(MSG_FETCH_OBJECT_DETAILS_FAILED);\r\n      } finally {\r\n        dispatch(setLoading(false));\r\n      }\r\n    },\r\n    [dispatch, handlePlantAssignment]\r\n  );\r\n \r\n  const handleDrop = useCallback(\r\n    async (dataItems) => {\r\n      console.log(\"[handleDrop] handleDrop called with dataItems:\", dataItems);\r\n \r\n      try {\r\n        if (dataItems && dataItems.length > 0) {\r\n          // Validate object type\r\n          const objectType = dataItems[0]?.objectType;\r\n          const validTypes = [\r\n            \"VPMReference\",\r\n            \"Document\",\r\n            \"Raw_Material\",\r\n            \"Change Action\",\r\n          ]; //\r\n          if (!validTypes.includes(objectType)) {\r\n            showErrorToast(MSG_INVALID_OBJECT_TYPE);\r\n            return;\r\n          }\r\n          dispatch(setIsDroppedAction(true));\r\n          // ✅ Ensure we only start loading if another request isn't running\r\n          console.log(\"[handleDrop] 🔄 Force setting `loading = true`...\");\r\n          dispatch(setLoading(false));\r\n          setTimeout(() => dispatch(setLoading(true)), 0);\r\n          await fetchObjectDetails(dataItems);\r\n        } else {\r\n          console.warn(\"[handleDrop] No data items to process.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"[Drop] Error in handleDrop:\", error);\r\n        dispatch(setLoading(false)); // ✅ Reset loading in Redux\r\n        console.log(\r\n          \"[handleDrop] Error in handleDrop, setting loading to false\"\r\n        );\r\n        showErrorToast(MSG_UNEXPECTED_ERROR);\r\n      }\r\n      // finally {\r\n      //   const latestLoadingState = store.getState().droppedObject.loading;\r\n      //   if (latestLoadingState) {\r\n      //     console.log(\"[handleDrop] ✅ Resetting `loading = false`...\");\r\n      //     setLoading(false);\r\n      //   } else {\r\n      //     console.log(\"[handleDrop] ⏳ `loading` is already false. Skipping reset.\");\r\n      //   }\r\n      // }\r\n    },\r\n    [fetchObjectDetails, showErrorToast]\r\n  );\r\n  // Initialize droppable area\r\n  const initializeDroppableArea = useCallback(() => {\r\n    // ✅ Only reset isDropped if it's currently false (prevent overwriting a valid drop)\r\n    if (!isDropped) {\r\n      console.log(\r\n        \"[initializeDroppableArea] 🚀 Resetting isDropped to false...\"\r\n      );\r\n      dispatch(setIsDroppedAction(false)); // ✅ Reset only if necessary\r\n    } else {\r\n      console.log(\r\n        \"[initializeDroppableArea] ⏳ isDropped is already true. Skipping reset.\"\r\n      );\r\n    }\r\n    const interval = setInterval(() => {\r\n      const droppableContainer = document.querySelector(\".droppable-container\");\r\n      if (droppableContainer) {\r\n        clearInterval(interval);\r\n        initDroppable(droppableContainer, handleDrop, dispatch, showErrorToast);\r\n      }\r\n    }, 100); // Check every 100ms\r\n \r\n    return () => clearInterval(interval); // Cleanup interval on unmount\r\n  }, [handleDrop, dispatch]);\r\n \r\n  return {\r\n    initializeDroppableArea,\r\n    loading,\r\n    handleDrop,\r\n  };\r\n};\r\n \r\nexport default usePlantDropableArea;","import useToast from \"../hooks/useToast\";\r\n\r\nimport api from \"../utils/api\"; // Import axios instance\r\nimport { MSG_REPLACE_SUCCESS, MSG_REPLACE_ERROR } from \"../utils/toastMessages\";\r\n\r\nconst useRevisions = () => {\r\n  const { showSuccessToast, showErrorToast } = useToast();\r\n\r\n  const fetchRevisionsAndParents = async (\r\n    objectId,\r\n    objectType,\r\n    relativePath\r\n  ) => {\r\n    if (!relativePath) {\r\n      console.error(\"[Fetch Revisions] ❌ Missing relative path.\");\r\n      return;\r\n    }\r\n\r\n    const parentURL = `/revFloat/getParents`;\r\n\r\n    try {\r\n      // Use the axios instance to make the POST request\r\n      const response = await api.post(parentURL, {\r\n        data: {\r\n          id: objectId,\r\n          type: objectType,\r\n          relativePath: relativePath,\r\n        },\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const parentDetails = response.data;\r\n\r\n        // 🚀 Return data instead of dispatching\r\n        return parentDetails;\r\n      } else {\r\n        throw new Error(\r\n          `[Fetch Revisions] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"[Fetch Revisions] ❌ Error occurred:\", error);\r\n      return null; // Ensure it returns null on error\r\n    }\r\n  };\r\n\r\n  const replaceRevisions = async (selectedParents, droppedData, userEmail) => {\r\n    const parentURL = `/revFloat/floatRevisions`; // Use relative path for axios\r\n\r\n    try {\r\n      // Make the POST request to the replacement API\r\n      const response = await api.post(parentURL, {\r\n        SelectedParents: selectedParents,\r\n        DroppedData: droppedData,\r\n        userEmail: userEmail,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful replacement\r\n        console.log(\"Replacement successful:\", response.data);\r\n        showSuccessToast(MSG_REPLACE_SUCCESS); // Show success toast\r\n        // You might want to update the Redux store or refetch data here\r\n        return { success: true };\r\n      } else {\r\n        throw new Error(\r\n          `[Replacement API] HTTP error! status: ${response.status}`\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during replacement:\", error);\r\n      showErrorToast(MSG_REPLACE_ERROR); // Show error toast\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  return { fetchRevisionsAndParents, replaceRevisions };\r\n};\r\n\r\nexport default useRevisions;\r\n","// hooks/useToast.js\r\nimport { toast } from \"react-toastify\";\r\nimport { Bounce } from \"react-toastify\";\r\n\r\nconst useToast = () => {\r\n  const showToast = ({\r\n    message,\r\n    type = \"default\",\r\n    position = \"top-right\",\r\n    autoClose = 2000,\r\n    hideProgressBar = false,\r\n    closeOnClick = true,\r\n    pauseOnHover = false,\r\n    pauseOnFocusLoss= false,\r\n    draggable = true,\r\n    theme = \"light\",\r\n    transition = Bounce,\r\n    progress = undefined,\r\n    ...otherOptions\r\n  }) => {\r\n    const toastFunction = toast[type] || toast;\r\n\r\n    toastFunction(message, {\r\n      position,\r\n      autoClose,\r\n      hideProgressBar,\r\n      closeOnClick,\r\n      pauseOnHover,\r\n      draggable,\r\n      theme,\r\n      transition,\r\n      progress,\r\n      ...otherOptions,\r\n    });\r\n  };\r\n\r\n  const showSuccessToast = (message, options = {}) => {\r\n    showToast({ message, type: \"success\", ...options });\r\n  };\r\n\r\n  const showErrorToast = (message, options = {}) => {\r\n    showToast({ message, type: \"error\", ...options });\r\n  };\r\n\r\n  const showInfoToast = (message, options = {}) => {\r\n    showToast({ message, type: \"info\", ...options });\r\n  };\r\n\r\n  const showWarningToast = (message, options = {}) => {\r\n    showToast({ message, type: \"warn\", ...options });\r\n  };\r\n\r\n  return { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast };\r\n};\r\n\r\n// New function that wraps useToast and adds progress\r\nconst useToastWithProgress = () => {\r\n  const { showToast, showSuccessToast, showErrorToast, showInfoToast, showWarningToast } = useToast();\r\n\r\n  const showToastWithProgress = (message, options = {}) => {\r\n    showToast({ message, progress: 1, ...options }); // Add progress property\r\n  };\r\n\r\n  const showSuccessToastWithProgress = (message, options = {}) => {\r\n    showSuccessToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showErrorToastWithProgress = (message, options = {}) => {\r\n    showErrorToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showInfoToastWithProgress = (message, options = {}) => {\r\n    showInfoToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  const showWarningToastWithProgress = (message, options = {}) => {\r\n    showWarningToast(message, { progress: 1, ...options });\r\n  };\r\n\r\n  return {\r\n    showToastWithProgress,\r\n    showSuccessToastWithProgress,\r\n    showErrorToastWithProgress,\r\n    showInfoToastWithProgress,\r\n    showWarningToastWithProgress,\r\n  };\r\n};\r\n\r\n// export { useToast, useToastWithProgress };\r\nexport default useToast;\r\nexport { useToastWithProgress };","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const getAllPlants = async (allCollabSpaces, headers, objectId) => {\r\n  try {\r\n    const ENOVIA_BASE_URL = process.env.REACT_APP_ENOVIA_BASE_URL;\r\n    let UserGroupClasses = [];\r\n    console.log(\"[All Plant Service] CollabSpaces: \", allCollabSpaces);\r\n    console.log(\"[All Plant Service] headers: \", headers);\r\n    const WAFData = await loadWAFData();\r\n\r\n    const fetchData = async (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        WAFData.authenticatedRequest(url, {\r\n          method: \"GET\",\r\n          headers,\r\n          type: \"json\",\r\n          onComplete: (response) => {\r\n            console.log(\"Received response:\", response);\r\n            resolve(response); // Resolve the promise with the response data\r\n          },\r\n          onFailure: (error) => {\r\n            console.error(\"Request failed:\", error);\r\n            reject(error); // Reject the promise with the error\r\n          },\r\n        });\r\n      });\r\n    };\r\n\r\n    // Iterate through all collab spaces and fetch data for each\r\n    const plantDataPromises = allCollabSpaces.map(async (collabSpace) => {\r\n      try {\r\n        const collabspaceURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/search?$searchStr=${collabSpace}`;\r\n\r\n        const collabspaceResponse = await fetchData(collabspaceURL);\r\n        const libraryId = collabspaceResponse.member?.find(\r\n          (item) => item.title === collabSpace\r\n        )?.id;\r\n\r\n        console.log(\"[All Plant Service] Library id is:\", libraryId);\r\n\r\n        if (libraryId) {\r\n          const libraryDataURL = `${ENOVIA_BASE_URL}/resources/v1/modeler/dslib/dslib:Library/${libraryId}?$mask=dslib:ExpandClassifiableClassesMask`;\r\n\r\n          const classResponse = await fetchData(libraryDataURL);\r\n\r\n          const { member } = classResponse;\r\n\r\n          if (member && member.length > 0) {\r\n            console.log(\"[Library Data Service] Member found:\", member);\r\n\r\n            const factoriesData = member[0]?.ChildClasses;\r\n\r\n            if (factoriesData?.member?.length > 0) {\r\n              const plantsData = factoriesData.member[0].ChildClasses?.member;\r\n\r\n              if (plantsData && plantsData.length > 0) {\r\n                // Filter out duplicates based on `id` (or any unique property)\r\n                const uniquePlantsData = plantsData.filter(\r\n                  (plant) =>\r\n                    !UserGroupClasses.some(\r\n                      (userClass) => userClass.id === plant.id\r\n                    )\r\n                );\r\n\r\n                // Add only unique items from plantsData to UserGroupClasses\r\n                UserGroupClasses = [...UserGroupClasses, ...uniquePlantsData];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error processing group:\", collabSpace, error);\r\n        throw error; // Throw the error to be handled by Promise.all\r\n      }\r\n    });\r\n\r\n    await Promise.all(plantDataPromises); // Wait for all promises to resolve\r\n    return UserGroupClasses; // Return the updated UserGroupClasses\r\n  } catch (error) {\r\n    console.error(\"[All Plant Service] Error occurred:\", error);\r\n    throw error; // Re-throw the error for upstream handling\r\n  }\r\n};\r\n","import { loadWAFData } from \"../../../utils/helpers\";\r\n\r\nexport const fetchCsrfToken = async () => {\r\n  try {\r\n    let securityContext1 = window.widget.getValue(\"Credentials\");\r\n    const WAFData = await loadWAFData();\r\n    console.log(\"Security Context is:\", securityContext1);\r\n    const csrfURL = process.env.REACT_APP_CSRF_URL;\r\n\r\n    const response = await new Promise((resolve, reject) => {\r\n      WAFData.authenticatedRequest(csrfURL, {\r\n        method: \"GET\",\r\n        type: \"json\",\r\n        onComplete: resolve,\r\n        onFailure: reject,\r\n      });\r\n    });\r\n\r\n    const csrfToken = response.csrf.name;\r\n    const csrfValue = response.csrf.value;\r\n    const securityContextHeader = \"SecurityContext\";\r\n    const securityContextValue = securityContext1;\r\n\r\n    const headers = {\r\n      [csrfToken]: csrfValue,\r\n      [securityContextHeader]: securityContextValue,\r\n    };\r\n    return headers;\r\n  } catch (error) {\r\n    console.error(\"[CSRF] Failed to fetch token:\", error);\r\n    return; // Return empth so that the else block should execute.\r\n  }\r\n};\r\n","export const refreshWidgetData = async (dataItems, handleDrop) => {\r\n  console.log(\"[refreshWidgetData] called with dataItems:\", dataItems);\r\n  if (!dataItems || dataItems.length === 0) {\r\n    console.warn(\"[Refresh] No dropped data available to refresh.\");\r\n    return;\r\n  }\r\n  try {\r\n    if (typeof handleDrop !== \"function\") {\r\n      throw new Error(\"[Refresh] handleDrop is not a function.\");\r\n    }\r\n    await handleDrop(dataItems);\r\n  } catch (error) {\r\n    console.error(\"[Refresh] Error during handleDrop execution:\", error);\r\n  }\r\n};\r\n"],"names":["_ref","variant","size","type","disabled","onClick","className","title","text","imageSrc","props","_objectWithoutProperties","_excluded","_jsxs","Button","_objectSpread","children","_jsx","src","alt","style","width","height","marginRight","data","isColumn","onDragStart","onDragEnd","widgetType","titleRef","useRef","initialDraggedData","useSelector","state","droppedObject","droppedObjectData","useEffect","current","makeDraggable","concat","ref","border","owner","paddingLeft","_Fragment","EIN","Description","setIsColumn","useState","Card","Img","imageURL","CardBody","List","toggleFlexDirection","Image","plantDroppable","usePlantDropableArea","bosDropable","useBOSDropableArea","defaultDroppable","useDroppableArea","initializeDroppableArea","hasInitializedDroppable","isDragging","setIsDragging","DragAndDropStandAlone","CardComponent","handleDragStart","handleDragEnd","Loader","onSearch","searchText","setSearchText","inputRef","FontAwesomeIcon","icon","faMagnifyingGlass","handleSearchIconClick","trim","InputGroup","Form","Control","value","onChange","event","newSearchText","target","onKeyDown","key","placeholder","handleClearClick","focus","header","columns","table","isFixed","column","id","isPinned","getState","columnPinning","left","includes","sortable","useSortable","attributes","listeners","setNodeRef","transform","opacity","position","top","CSS","Transform","toString","transition","getSize","zIndex","cursor","backgroundColor","getToggleSortingHandler","isPlaceholder","flexRender","columnDef","getContext","getIsSorted","onDoubleClick","resetSize","onMouseDown","getResizeHandler","onTouchStart","getIsResizing","cell","changedCells","getIsPinned","cellContent","columnName","split","slice","join","isChanged","getValue","color","fontWeight","getWidgetStorageKey","console","log","warn","editable","meta","latestRevision","droppedRevision","onSelectableRowsChange","showActionButtons","dispatch","useDispatch","tableData","setTableData","rowSelection","setRowSelection","lastSelectedId","setLastSelectedId","tableRef","isScrolled","setIsScrolled","handleScroll","e","scrollTop","tableContainer","addEventListener","removeEventListener","updateTableData","columnOrder","setColumnOrder","storageKey","storedOrder","localStorage","getItem","parsed","JSON","parse","every","colId","some","col","accessorKey","error","initialOrder","otherColumns","map","push","setItem","stringify","defaultColumnOrder","useMemo","initialColumnPinning","pinnedColumns","forEach","enhancedColumns","selectionColumn","_ref2","el","indeterminate","getIsSomeRowsSelected","checked","getIsAllRowsSelected","getToggleAllRowsSelectedHandler","_ref3","row","isSelectable","enableRowSelection","original","getIsSelected","getToggleSelectedHandler","baseColumns","_ref4","handleEditCell","rowIndex","columnId","updatedData","index","sensors","useSensors","useSensor","MouseSensor","activationConstraint","distance","TouchSensor","delay","tolerance","KeyboardSensor","selectableRows","filter","IsLatest","useReactTable","onRowSelectionChange","onColumnOrderChange","getCoreRowModel","getSortedRowModel","defaultColumn","minSize","maxSize","columnResizeMode","selectedRows","getSelectedRowModel","flatRows","setSelectedTableRows","columnSizeVars","headers","getFlatHeaders","colSizes","getTotalSize","i","length","columnSizingInfo","columnSizing","CustomButton","handleSelectAll","handleDeselectAll","handleExport","handleExportExcel","handleResetColumns","removeItem","DndContext","collisionDetection","closestCenter","modifiers","restrictToHorizontalAxis","active","over","prevOrder","oldIndex","indexOf","newIndex","arrayMove","getHeaderGroups","headerGroup","SortableContext","items","getVisibleLeafColumns","strategy","horizontalListSortingStrategy","DraggableColumnHeader","getRowModel","rows","handleRowClick","rowsById","shiftKey","rowsToToggle","getRowRange","isLastSelected","r","toggleSelected","getVisibleCells","DraggableCell","colSpan","useBOSWidget","showErrorToast","useToast","ENOVIA_BASE_URL","process","email","window","widget","handleBOSWidget","async","collabSpace","objectId","parentName","parentRevision","setParentDetailsLoading","fetchCsrfToken","MSG_FETCH_CSRF_HEADERS_FAILED","baseURL","parentDirection","urlObjWAF","ChildObject","callEnoviaWebService","status","output","_response$data","_response$data$data","_response$data2","_response$data2$data","requestBody","getUrl","ChildObjectDocument","sSpec","dataelements","secondaryTitle","revision","stateNLS","name","revisionBody","child","body","identifier","source","relativePath","RevisionUrl","response","convertRevisionToNumber","rev","test","parseInt","number","charCodeAt","results","item","latestVersion","versions","reduce","latest","doc","version","isLatestRevision","SpecName","SpecRevision","Items","obj","ItemName","ItemRevision","Specifications","fetchData","mergedData","spec","matchingDoc","find","childState","childTitle","childLatest","childName","childRevision","PrintOnPurchaseOrderRequired","PrintOnWorkOrderRequired","WorkOrderDocumentRequired","PrintOnReportOrderRequired","setSpecDocument","isDropped","loading","fetchObjectDetails","useCallback","objectDetailsResult","getDroppedObjectDetails","dataItems","success","setDroppedObjectData","cardData","draggedObjectData","_dataItems$","_dataItems$2","setIsDroppedAction","objectType","Name","MSG_FETCH_OBJECT_DETAILS_FAILED","setLoading","handleDrop","MSG_UNEXPECTED_ERROR","interval","setInterval","droppableContainer","document","querySelector","clearInterval","initDroppable","fetchRevisionsAndParents","useRevisions","revisionParentData","Promise","all","parentDetails","_dataItems$3","validTypes","MSG_INVALID_DOCUMENT_CREATION_OBJECT_TYPE","MSG_INVALID_OBJECT_TYPE","setTimeout","useInterComSearch","socket","setSocket","InterCom","setInterCom","interComInstance","loadInterCom","loadData","disconnect","performSearch","searchOpts","onObjectsSelected","_window$widget","socketName","Date","toISOString","replace","newSocket","Socket","dispatchRetryInternal","subscribeServer","widgetId","finalSearchOpts","widget_id","app_socket_id","default_search_criteria","dispatchEvent","addListener","GetFlowDownCADetails","flowDownCA","CADetails","CAAtt","WAFData","loadWAFData","resolve","reject","authenticatedRequest","url","method","onComplete","onFailure","searchResponse","routeData","RouteID","RouteStatus","RouteURL","RouteDetails","ChangeData","MFGCAID","CAUrl","CAresponse","isFlowDownOf","EngCAUrl","EngCAResponse","CATitle","CAState","usePlantAssignment","handlePlantAssignment","ItemDetails","isMFGCA","fetchChangeActionData","CAURL","realizedChanges","realizedChange","where","changeProcessingPromises","proposedChanges","ItemId","change","ItemType","sLatestID","revurl","ret","Body","result","ancestors","ancestor","getLatestRevision","mfgDetails","itemResponse","member","ScopeEngItem","getScopedItms","undefined","_Iteminfo$member$","_Iteminfo$member$$dse","ItemPlants","Iteminfo","getAssignedClasses","getItemDetails","ItemState","ItemTitle","ItemMBOM","EMR_hasMBOM","err","CAAllPlantsData","allPlants","getAllPlants","setCAAllPlants","setCAItemDetails","setIsMFGCA","setCAHeaders","userGroupCollab","objectID","userGroup","userGroupBody","groups","sharings","userGroups","group","access","uri","userGroupID","grpUrl","grpresponse","members","getUserGroupCollab","allCollabSpaces","plants","libraryDataURL","initialAssignedClasses","uniqueInAllclasses","ClassExtensions","ClassificationAttributes","classItem","parentClass","ClassID","PlantName","promiseArray","Attributes","eachAttribute","then","flowDownCADetails","MCOTitle","MCOState","CA","allClass","assigned","plantData","initialAssignedPlants","uniquePlants","fetchAssignedPlants","setPlantObjectData","setHeaders","getProductChildren","expandDepth","type_filter_bo","type_filter_rel","Method","classifyBody","childs","toLowerCase","classesurl","classResponse","classIds","flatMap","_member$Classificatio","classification","classes","fetchProductChildren","setProductChildren","getCaDetails","resObejct","proposedChangesArray","URLCADetails","relations","allRelationsMode","publicationsMode","computeWithInstances","attributesForView","label","lang","ghostMode","url2","bd","responseMode","ids","response2","objectsByPatterns","caproposedwhere_from","itm","CAName","url3","response3","Array","isArray","proposedChange","action","whats","what","CAData","fetchCADetails","setCAName","setProposedChanges","setCAData","plantIdData","classId","plantName","erpStatus","attribute","PlantID","PlantERPStatus","showSuccessToast","api","post","Error","replaceRevisions","selectedParents","droppedData","userEmail","SelectedParents","DroppedData","MSG_REPLACE_SUCCESS","MSG_REPLACE_ERROR","message","showToast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","pauseOnFocusLoss","draggable","theme","Bounce","progress","otherOptions","toast","options","arguments","showInfoToast","showWarningToast","useToastWithProgress","showToastWithProgress","showSuccessToastWithProgress","showErrorToastWithProgress","showInfoToastWithProgress","showWarningToastWithProgress","UserGroupClasses","plantDataPromises","_collabspaceResponse$","_collabspaceResponse$2","collabspaceURL","libraryId","_member$","_factoriesData$member","factoriesData","ChildClasses","_factoriesData$member2","plantsData","uniquePlantsData","plant","userClass","securityContext1","csrfURL","csrfToken","csrf","csrfValue","securityContextHeader","securityContextValue","refreshWidgetData"],"sourceRoot":""}